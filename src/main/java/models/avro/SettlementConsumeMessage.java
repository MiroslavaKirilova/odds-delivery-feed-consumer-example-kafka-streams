/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package models.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class SettlementConsumeMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5789157826679583830L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SettlementConsumeMessage\",\"namespace\":\"models.avro\",\"fields\":[{\"name\":\"marketTypeId\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"oddId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"marketId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"leagueId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"eventId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"foreignKey\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lineEntityId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"selectionStatus\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SettlementConsumeMessage> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SettlementConsumeMessage> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SettlementConsumeMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SettlementConsumeMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SettlementConsumeMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SettlementConsumeMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SettlementConsumeMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SettlementConsumeMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SettlementConsumeMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private Integer marketTypeId;
  private CharSequence id;
  private CharSequence oddId;
  private CharSequence marketId;
  private CharSequence leagueId;
  private CharSequence eventId;
  private CharSequence foreignKey;
  private CharSequence lineEntityId;
  private CharSequence selectionStatus;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SettlementConsumeMessage() {}

  /**
   * All-args constructor.
   * @param marketTypeId The new value for marketTypeId
   * @param id The new value for id
   * @param oddId The new value for oddId
   * @param marketId The new value for marketId
   * @param leagueId The new value for leagueId
   * @param eventId The new value for eventId
   * @param foreignKey The new value for foreignKey
   * @param lineEntityId The new value for lineEntityId
   * @param selectionStatus The new value for selectionStatus
   */
  public SettlementConsumeMessage(Integer marketTypeId, CharSequence id, CharSequence oddId, CharSequence marketId, CharSequence leagueId, CharSequence eventId, CharSequence foreignKey, CharSequence lineEntityId, CharSequence selectionStatus) {
    this.marketTypeId = marketTypeId;
    this.id = id;
    this.oddId = oddId;
    this.marketId = marketId;
    this.leagueId = leagueId;
    this.eventId = eventId;
    this.foreignKey = foreignKey;
    this.lineEntityId = lineEntityId;
    this.selectionStatus = selectionStatus;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return marketTypeId;
    case 1: return id;
    case 2: return oddId;
    case 3: return marketId;
    case 4: return leagueId;
    case 5: return eventId;
    case 6: return foreignKey;
    case 7: return lineEntityId;
    case 8: return selectionStatus;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: marketTypeId = (Integer)value$; break;
    case 1: id = (CharSequence)value$; break;
    case 2: oddId = (CharSequence)value$; break;
    case 3: marketId = (CharSequence)value$; break;
    case 4: leagueId = (CharSequence)value$; break;
    case 5: eventId = (CharSequence)value$; break;
    case 6: foreignKey = (CharSequence)value$; break;
    case 7: lineEntityId = (CharSequence)value$; break;
    case 8: selectionStatus = (CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'marketTypeId' field.
   * @return The value of the 'marketTypeId' field.
   */
  public Integer getMarketTypeId() {
    return marketTypeId;
  }


  /**
   * Sets the value of the 'marketTypeId' field.
   * @param value the value to set.
   */
  public void setMarketTypeId(Integer value) {
    this.marketTypeId = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'oddId' field.
   * @return The value of the 'oddId' field.
   */
  public CharSequence getOddId() {
    return oddId;
  }


  /**
   * Sets the value of the 'oddId' field.
   * @param value the value to set.
   */
  public void setOddId(CharSequence value) {
    this.oddId = value;
  }

  /**
   * Gets the value of the 'marketId' field.
   * @return The value of the 'marketId' field.
   */
  public CharSequence getMarketId() {
    return marketId;
  }


  /**
   * Sets the value of the 'marketId' field.
   * @param value the value to set.
   */
  public void setMarketId(CharSequence value) {
    this.marketId = value;
  }

  /**
   * Gets the value of the 'leagueId' field.
   * @return The value of the 'leagueId' field.
   */
  public CharSequence getLeagueId() {
    return leagueId;
  }


  /**
   * Sets the value of the 'leagueId' field.
   * @param value the value to set.
   */
  public void setLeagueId(CharSequence value) {
    this.leagueId = value;
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public CharSequence getEventId() {
    return eventId;
  }


  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(CharSequence value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'foreignKey' field.
   * @return The value of the 'foreignKey' field.
   */
  public CharSequence getForeignKey() {
    return foreignKey;
  }


  /**
   * Sets the value of the 'foreignKey' field.
   * @param value the value to set.
   */
  public void setForeignKey(CharSequence value) {
    this.foreignKey = value;
  }

  /**
   * Gets the value of the 'lineEntityId' field.
   * @return The value of the 'lineEntityId' field.
   */
  public CharSequence getLineEntityId() {
    return lineEntityId;
  }


  /**
   * Sets the value of the 'lineEntityId' field.
   * @param value the value to set.
   */
  public void setLineEntityId(CharSequence value) {
    this.lineEntityId = value;
  }

  /**
   * Gets the value of the 'selectionStatus' field.
   * @return The value of the 'selectionStatus' field.
   */
  public CharSequence getSelectionStatus() {
    return selectionStatus;
  }


  /**
   * Sets the value of the 'selectionStatus' field.
   * @param value the value to set.
   */
  public void setSelectionStatus(CharSequence value) {
    this.selectionStatus = value;
  }

  /**
   * Creates a new SettlementConsumeMessage RecordBuilder.
   * @return A new SettlementConsumeMessage RecordBuilder
   */
  public static models.avro.SettlementConsumeMessage.Builder newBuilder() {
    return new models.avro.SettlementConsumeMessage.Builder();
  }

  /**
   * Creates a new SettlementConsumeMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SettlementConsumeMessage RecordBuilder
   */
  public static models.avro.SettlementConsumeMessage.Builder newBuilder(models.avro.SettlementConsumeMessage.Builder other) {
    if (other == null) {
      return new models.avro.SettlementConsumeMessage.Builder();
    } else {
      return new models.avro.SettlementConsumeMessage.Builder(other);
    }
  }

  /**
   * Creates a new SettlementConsumeMessage RecordBuilder by copying an existing SettlementConsumeMessage instance.
   * @param other The existing instance to copy.
   * @return A new SettlementConsumeMessage RecordBuilder
   */
  public static models.avro.SettlementConsumeMessage.Builder newBuilder(models.avro.SettlementConsumeMessage other) {
    if (other == null) {
      return new models.avro.SettlementConsumeMessage.Builder();
    } else {
      return new models.avro.SettlementConsumeMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for SettlementConsumeMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SettlementConsumeMessage>
    implements org.apache.avro.data.RecordBuilder<SettlementConsumeMessage> {

    private Integer marketTypeId;
    private CharSequence id;
    private CharSequence oddId;
    private CharSequence marketId;
    private CharSequence leagueId;
    private CharSequence eventId;
    private CharSequence foreignKey;
    private CharSequence lineEntityId;
    private CharSequence selectionStatus;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(models.avro.SettlementConsumeMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.marketTypeId)) {
        this.marketTypeId = data().deepCopy(fields()[0].schema(), other.marketTypeId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.oddId)) {
        this.oddId = data().deepCopy(fields()[2].schema(), other.oddId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.marketId)) {
        this.marketId = data().deepCopy(fields()[3].schema(), other.marketId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.leagueId)) {
        this.leagueId = data().deepCopy(fields()[4].schema(), other.leagueId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.eventId)) {
        this.eventId = data().deepCopy(fields()[5].schema(), other.eventId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.foreignKey)) {
        this.foreignKey = data().deepCopy(fields()[6].schema(), other.foreignKey);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.lineEntityId)) {
        this.lineEntityId = data().deepCopy(fields()[7].schema(), other.lineEntityId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.selectionStatus)) {
        this.selectionStatus = data().deepCopy(fields()[8].schema(), other.selectionStatus);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing SettlementConsumeMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(models.avro.SettlementConsumeMessage other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.marketTypeId)) {
        this.marketTypeId = data().deepCopy(fields()[0].schema(), other.marketTypeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.oddId)) {
        this.oddId = data().deepCopy(fields()[2].schema(), other.oddId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.marketId)) {
        this.marketId = data().deepCopy(fields()[3].schema(), other.marketId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.leagueId)) {
        this.leagueId = data().deepCopy(fields()[4].schema(), other.leagueId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.eventId)) {
        this.eventId = data().deepCopy(fields()[5].schema(), other.eventId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.foreignKey)) {
        this.foreignKey = data().deepCopy(fields()[6].schema(), other.foreignKey);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.lineEntityId)) {
        this.lineEntityId = data().deepCopy(fields()[7].schema(), other.lineEntityId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.selectionStatus)) {
        this.selectionStatus = data().deepCopy(fields()[8].schema(), other.selectionStatus);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'marketTypeId' field.
      * @return The value.
      */
    public Integer getMarketTypeId() {
      return marketTypeId;
    }


    /**
      * Sets the value of the 'marketTypeId' field.
      * @param value The value of 'marketTypeId'.
      * @return This builder.
      */
    public models.avro.SettlementConsumeMessage.Builder setMarketTypeId(Integer value) {
      validate(fields()[0], value);
      this.marketTypeId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'marketTypeId' field has been set.
      * @return True if the 'marketTypeId' field has been set, false otherwise.
      */
    public boolean hasMarketTypeId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'marketTypeId' field.
      * @return This builder.
      */
    public models.avro.SettlementConsumeMessage.Builder clearMarketTypeId() {
      marketTypeId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public models.avro.SettlementConsumeMessage.Builder setId(CharSequence value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public models.avro.SettlementConsumeMessage.Builder clearId() {
      id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'oddId' field.
      * @return The value.
      */
    public CharSequence getOddId() {
      return oddId;
    }


    /**
      * Sets the value of the 'oddId' field.
      * @param value The value of 'oddId'.
      * @return This builder.
      */
    public models.avro.SettlementConsumeMessage.Builder setOddId(CharSequence value) {
      validate(fields()[2], value);
      this.oddId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'oddId' field has been set.
      * @return True if the 'oddId' field has been set, false otherwise.
      */
    public boolean hasOddId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'oddId' field.
      * @return This builder.
      */
    public models.avro.SettlementConsumeMessage.Builder clearOddId() {
      oddId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'marketId' field.
      * @return The value.
      */
    public CharSequence getMarketId() {
      return marketId;
    }


    /**
      * Sets the value of the 'marketId' field.
      * @param value The value of 'marketId'.
      * @return This builder.
      */
    public models.avro.SettlementConsumeMessage.Builder setMarketId(CharSequence value) {
      validate(fields()[3], value);
      this.marketId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'marketId' field has been set.
      * @return True if the 'marketId' field has been set, false otherwise.
      */
    public boolean hasMarketId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'marketId' field.
      * @return This builder.
      */
    public models.avro.SettlementConsumeMessage.Builder clearMarketId() {
      marketId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'leagueId' field.
      * @return The value.
      */
    public CharSequence getLeagueId() {
      return leagueId;
    }


    /**
      * Sets the value of the 'leagueId' field.
      * @param value The value of 'leagueId'.
      * @return This builder.
      */
    public models.avro.SettlementConsumeMessage.Builder setLeagueId(CharSequence value) {
      validate(fields()[4], value);
      this.leagueId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'leagueId' field has been set.
      * @return True if the 'leagueId' field has been set, false otherwise.
      */
    public boolean hasLeagueId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'leagueId' field.
      * @return This builder.
      */
    public models.avro.SettlementConsumeMessage.Builder clearLeagueId() {
      leagueId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public CharSequence getEventId() {
      return eventId;
    }


    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public models.avro.SettlementConsumeMessage.Builder setEventId(CharSequence value) {
      validate(fields()[5], value);
      this.eventId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public models.avro.SettlementConsumeMessage.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'foreignKey' field.
      * @return The value.
      */
    public CharSequence getForeignKey() {
      return foreignKey;
    }


    /**
      * Sets the value of the 'foreignKey' field.
      * @param value The value of 'foreignKey'.
      * @return This builder.
      */
    public models.avro.SettlementConsumeMessage.Builder setForeignKey(CharSequence value) {
      validate(fields()[6], value);
      this.foreignKey = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'foreignKey' field has been set.
      * @return True if the 'foreignKey' field has been set, false otherwise.
      */
    public boolean hasForeignKey() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'foreignKey' field.
      * @return This builder.
      */
    public models.avro.SettlementConsumeMessage.Builder clearForeignKey() {
      foreignKey = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'lineEntityId' field.
      * @return The value.
      */
    public CharSequence getLineEntityId() {
      return lineEntityId;
    }


    /**
      * Sets the value of the 'lineEntityId' field.
      * @param value The value of 'lineEntityId'.
      * @return This builder.
      */
    public models.avro.SettlementConsumeMessage.Builder setLineEntityId(CharSequence value) {
      validate(fields()[7], value);
      this.lineEntityId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'lineEntityId' field has been set.
      * @return True if the 'lineEntityId' field has been set, false otherwise.
      */
    public boolean hasLineEntityId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'lineEntityId' field.
      * @return This builder.
      */
    public models.avro.SettlementConsumeMessage.Builder clearLineEntityId() {
      lineEntityId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'selectionStatus' field.
      * @return The value.
      */
    public CharSequence getSelectionStatus() {
      return selectionStatus;
    }


    /**
      * Sets the value of the 'selectionStatus' field.
      * @param value The value of 'selectionStatus'.
      * @return This builder.
      */
    public models.avro.SettlementConsumeMessage.Builder setSelectionStatus(CharSequence value) {
      validate(fields()[8], value);
      this.selectionStatus = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'selectionStatus' field has been set.
      * @return True if the 'selectionStatus' field has been set, false otherwise.
      */
    public boolean hasSelectionStatus() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'selectionStatus' field.
      * @return This builder.
      */
    public models.avro.SettlementConsumeMessage.Builder clearSelectionStatus() {
      selectionStatus = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SettlementConsumeMessage build() {
      try {
        SettlementConsumeMessage record = new SettlementConsumeMessage();
        record.marketTypeId = fieldSetFlags()[0] ? this.marketTypeId : (Integer) defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id : (CharSequence) defaultValue(fields()[1]);
        record.oddId = fieldSetFlags()[2] ? this.oddId : (CharSequence) defaultValue(fields()[2]);
        record.marketId = fieldSetFlags()[3] ? this.marketId : (CharSequence) defaultValue(fields()[3]);
        record.leagueId = fieldSetFlags()[4] ? this.leagueId : (CharSequence) defaultValue(fields()[4]);
        record.eventId = fieldSetFlags()[5] ? this.eventId : (CharSequence) defaultValue(fields()[5]);
        record.foreignKey = fieldSetFlags()[6] ? this.foreignKey : (CharSequence) defaultValue(fields()[6]);
        record.lineEntityId = fieldSetFlags()[7] ? this.lineEntityId : (CharSequence) defaultValue(fields()[7]);
        record.selectionStatus = fieldSetFlags()[8] ? this.selectionStatus : (CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SettlementConsumeMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<SettlementConsumeMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SettlementConsumeMessage>
    READER$ = (org.apache.avro.io.DatumReader<SettlementConsumeMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.marketTypeId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.marketTypeId);
    }

    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id);
    }

    if (this.oddId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.oddId);
    }

    if (this.marketId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.marketId);
    }

    if (this.leagueId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.leagueId);
    }

    if (this.eventId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.eventId);
    }

    if (this.foreignKey == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.foreignKey);
    }

    if (this.lineEntityId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.lineEntityId);
    }

    if (this.selectionStatus == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.selectionStatus);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.marketTypeId = null;
      } else {
        this.marketTypeId = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.oddId = null;
      } else {
        this.oddId = in.readString(this.oddId instanceof Utf8 ? (Utf8)this.oddId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.marketId = null;
      } else {
        this.marketId = in.readString(this.marketId instanceof Utf8 ? (Utf8)this.marketId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.leagueId = null;
      } else {
        this.leagueId = in.readString(this.leagueId instanceof Utf8 ? (Utf8)this.leagueId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.eventId = null;
      } else {
        this.eventId = in.readString(this.eventId instanceof Utf8 ? (Utf8)this.eventId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.foreignKey = null;
      } else {
        this.foreignKey = in.readString(this.foreignKey instanceof Utf8 ? (Utf8)this.foreignKey : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.lineEntityId = null;
      } else {
        this.lineEntityId = in.readString(this.lineEntityId instanceof Utf8 ? (Utf8)this.lineEntityId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.selectionStatus = null;
      } else {
        this.selectionStatus = in.readString(this.selectionStatus instanceof Utf8 ? (Utf8)this.selectionStatus : null);
      }

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.marketTypeId = null;
          } else {
            this.marketTypeId = in.readInt();
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.oddId = null;
          } else {
            this.oddId = in.readString(this.oddId instanceof Utf8 ? (Utf8)this.oddId : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.marketId = null;
          } else {
            this.marketId = in.readString(this.marketId instanceof Utf8 ? (Utf8)this.marketId : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.leagueId = null;
          } else {
            this.leagueId = in.readString(this.leagueId instanceof Utf8 ? (Utf8)this.leagueId : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.eventId = null;
          } else {
            this.eventId = in.readString(this.eventId instanceof Utf8 ? (Utf8)this.eventId : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.foreignKey = null;
          } else {
            this.foreignKey = in.readString(this.foreignKey instanceof Utf8 ? (Utf8)this.foreignKey : null);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lineEntityId = null;
          } else {
            this.lineEntityId = in.readString(this.lineEntityId instanceof Utf8 ? (Utf8)this.lineEntityId : null);
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.selectionStatus = null;
          } else {
            this.selectionStatus = in.readString(this.selectionStatus instanceof Utf8 ? (Utf8)this.selectionStatus : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










