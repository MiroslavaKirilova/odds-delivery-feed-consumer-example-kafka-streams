/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package models.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class LiveScores extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3184319461343196990L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LiveScores\",\"namespace\":\"models.avro\",\"fields\":[{\"name\":\"lineEntity\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LineEntity\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"gamePeriod\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"GamePeriod\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"home\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"away\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LiveScores> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LiveScores> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LiveScores> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LiveScores> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LiveScores> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LiveScores to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LiveScores from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LiveScores instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LiveScores fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private models.avro.LineEntity lineEntity;
  private models.avro.GamePeriod gamePeriod;
  private Integer home;
  private Integer away;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LiveScores() {}

  /**
   * All-args constructor.
   * @param lineEntity The new value for lineEntity
   * @param gamePeriod The new value for gamePeriod
   * @param home The new value for home
   * @param away The new value for away
   */
  public LiveScores(models.avro.LineEntity lineEntity, models.avro.GamePeriod gamePeriod, Integer home, Integer away) {
    this.lineEntity = lineEntity;
    this.gamePeriod = gamePeriod;
    this.home = home;
    this.away = away;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return lineEntity;
    case 1: return gamePeriod;
    case 2: return home;
    case 3: return away;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: lineEntity = (models.avro.LineEntity)value$; break;
    case 1: gamePeriod = (models.avro.GamePeriod)value$; break;
    case 2: home = (Integer)value$; break;
    case 3: away = (Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'lineEntity' field.
   * @return The value of the 'lineEntity' field.
   */
  public models.avro.LineEntity getLineEntity() {
    return lineEntity;
  }


  /**
   * Sets the value of the 'lineEntity' field.
   * @param value the value to set.
   */
  public void setLineEntity(models.avro.LineEntity value) {
    this.lineEntity = value;
  }

  /**
   * Gets the value of the 'gamePeriod' field.
   * @return The value of the 'gamePeriod' field.
   */
  public models.avro.GamePeriod getGamePeriod() {
    return gamePeriod;
  }


  /**
   * Sets the value of the 'gamePeriod' field.
   * @param value the value to set.
   */
  public void setGamePeriod(models.avro.GamePeriod value) {
    this.gamePeriod = value;
  }

  /**
   * Gets the value of the 'home' field.
   * @return The value of the 'home' field.
   */
  public Integer getHome() {
    return home;
  }


  /**
   * Sets the value of the 'home' field.
   * @param value the value to set.
   */
  public void setHome(Integer value) {
    this.home = value;
  }

  /**
   * Gets the value of the 'away' field.
   * @return The value of the 'away' field.
   */
  public Integer getAway() {
    return away;
  }


  /**
   * Sets the value of the 'away' field.
   * @param value the value to set.
   */
  public void setAway(Integer value) {
    this.away = value;
  }

  /**
   * Creates a new LiveScores RecordBuilder.
   * @return A new LiveScores RecordBuilder
   */
  public static models.avro.LiveScores.Builder newBuilder() {
    return new models.avro.LiveScores.Builder();
  }

  /**
   * Creates a new LiveScores RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LiveScores RecordBuilder
   */
  public static models.avro.LiveScores.Builder newBuilder(models.avro.LiveScores.Builder other) {
    if (other == null) {
      return new models.avro.LiveScores.Builder();
    } else {
      return new models.avro.LiveScores.Builder(other);
    }
  }

  /**
   * Creates a new LiveScores RecordBuilder by copying an existing LiveScores instance.
   * @param other The existing instance to copy.
   * @return A new LiveScores RecordBuilder
   */
  public static models.avro.LiveScores.Builder newBuilder(models.avro.LiveScores other) {
    if (other == null) {
      return new models.avro.LiveScores.Builder();
    } else {
      return new models.avro.LiveScores.Builder(other);
    }
  }

  /**
   * RecordBuilder for LiveScores instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LiveScores>
    implements org.apache.avro.data.RecordBuilder<LiveScores> {

    private models.avro.LineEntity lineEntity;
    private models.avro.LineEntity.Builder lineEntityBuilder;
    private models.avro.GamePeriod gamePeriod;
    private models.avro.GamePeriod.Builder gamePeriodBuilder;
    private Integer home;
    private Integer away;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(models.avro.LiveScores.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.lineEntity)) {
        this.lineEntity = data().deepCopy(fields()[0].schema(), other.lineEntity);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasLineEntityBuilder()) {
        this.lineEntityBuilder = models.avro.LineEntity.newBuilder(other.getLineEntityBuilder());
      }
      if (isValidValue(fields()[1], other.gamePeriod)) {
        this.gamePeriod = data().deepCopy(fields()[1].schema(), other.gamePeriod);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasGamePeriodBuilder()) {
        this.gamePeriodBuilder = models.avro.GamePeriod.newBuilder(other.getGamePeriodBuilder());
      }
      if (isValidValue(fields()[2], other.home)) {
        this.home = data().deepCopy(fields()[2].schema(), other.home);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.away)) {
        this.away = data().deepCopy(fields()[3].schema(), other.away);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing LiveScores instance
     * @param other The existing instance to copy.
     */
    private Builder(models.avro.LiveScores other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.lineEntity)) {
        this.lineEntity = data().deepCopy(fields()[0].schema(), other.lineEntity);
        fieldSetFlags()[0] = true;
      }
      this.lineEntityBuilder = null;
      if (isValidValue(fields()[1], other.gamePeriod)) {
        this.gamePeriod = data().deepCopy(fields()[1].schema(), other.gamePeriod);
        fieldSetFlags()[1] = true;
      }
      this.gamePeriodBuilder = null;
      if (isValidValue(fields()[2], other.home)) {
        this.home = data().deepCopy(fields()[2].schema(), other.home);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.away)) {
        this.away = data().deepCopy(fields()[3].schema(), other.away);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'lineEntity' field.
      * @return The value.
      */
    public models.avro.LineEntity getLineEntity() {
      return lineEntity;
    }


    /**
      * Sets the value of the 'lineEntity' field.
      * @param value The value of 'lineEntity'.
      * @return This builder.
      */
    public models.avro.LiveScores.Builder setLineEntity(models.avro.LineEntity value) {
      validate(fields()[0], value);
      this.lineEntityBuilder = null;
      this.lineEntity = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'lineEntity' field has been set.
      * @return True if the 'lineEntity' field has been set, false otherwise.
      */
    public boolean hasLineEntity() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'lineEntity' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public models.avro.LineEntity.Builder getLineEntityBuilder() {
      if (lineEntityBuilder == null) {
        if (hasLineEntity()) {
          setLineEntityBuilder(models.avro.LineEntity.newBuilder(lineEntity));
        } else {
          setLineEntityBuilder(models.avro.LineEntity.newBuilder());
        }
      }
      return lineEntityBuilder;
    }

    /**
     * Sets the Builder instance for the 'lineEntity' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public models.avro.LiveScores.Builder setLineEntityBuilder(models.avro.LineEntity.Builder value) {
      clearLineEntity();
      lineEntityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'lineEntity' field has an active Builder instance
     * @return True if the 'lineEntity' field has an active Builder instance
     */
    public boolean hasLineEntityBuilder() {
      return lineEntityBuilder != null;
    }

    /**
      * Clears the value of the 'lineEntity' field.
      * @return This builder.
      */
    public models.avro.LiveScores.Builder clearLineEntity() {
      lineEntity = null;
      lineEntityBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'gamePeriod' field.
      * @return The value.
      */
    public models.avro.GamePeriod getGamePeriod() {
      return gamePeriod;
    }


    /**
      * Sets the value of the 'gamePeriod' field.
      * @param value The value of 'gamePeriod'.
      * @return This builder.
      */
    public models.avro.LiveScores.Builder setGamePeriod(models.avro.GamePeriod value) {
      validate(fields()[1], value);
      this.gamePeriodBuilder = null;
      this.gamePeriod = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'gamePeriod' field has been set.
      * @return True if the 'gamePeriod' field has been set, false otherwise.
      */
    public boolean hasGamePeriod() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'gamePeriod' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public models.avro.GamePeriod.Builder getGamePeriodBuilder() {
      if (gamePeriodBuilder == null) {
        if (hasGamePeriod()) {
          setGamePeriodBuilder(models.avro.GamePeriod.newBuilder(gamePeriod));
        } else {
          setGamePeriodBuilder(models.avro.GamePeriod.newBuilder());
        }
      }
      return gamePeriodBuilder;
    }

    /**
     * Sets the Builder instance for the 'gamePeriod' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public models.avro.LiveScores.Builder setGamePeriodBuilder(models.avro.GamePeriod.Builder value) {
      clearGamePeriod();
      gamePeriodBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'gamePeriod' field has an active Builder instance
     * @return True if the 'gamePeriod' field has an active Builder instance
     */
    public boolean hasGamePeriodBuilder() {
      return gamePeriodBuilder != null;
    }

    /**
      * Clears the value of the 'gamePeriod' field.
      * @return This builder.
      */
    public models.avro.LiveScores.Builder clearGamePeriod() {
      gamePeriod = null;
      gamePeriodBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'home' field.
      * @return The value.
      */
    public Integer getHome() {
      return home;
    }


    /**
      * Sets the value of the 'home' field.
      * @param value The value of 'home'.
      * @return This builder.
      */
    public models.avro.LiveScores.Builder setHome(Integer value) {
      validate(fields()[2], value);
      this.home = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'home' field has been set.
      * @return True if the 'home' field has been set, false otherwise.
      */
    public boolean hasHome() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'home' field.
      * @return This builder.
      */
    public models.avro.LiveScores.Builder clearHome() {
      home = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'away' field.
      * @return The value.
      */
    public Integer getAway() {
      return away;
    }


    /**
      * Sets the value of the 'away' field.
      * @param value The value of 'away'.
      * @return This builder.
      */
    public models.avro.LiveScores.Builder setAway(Integer value) {
      validate(fields()[3], value);
      this.away = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'away' field has been set.
      * @return True if the 'away' field has been set, false otherwise.
      */
    public boolean hasAway() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'away' field.
      * @return This builder.
      */
    public models.avro.LiveScores.Builder clearAway() {
      away = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LiveScores build() {
      try {
        LiveScores record = new LiveScores();
        if (lineEntityBuilder != null) {
          try {
            record.lineEntity = this.lineEntityBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("lineEntity"));
            throw e;
          }
        } else {
          record.lineEntity = fieldSetFlags()[0] ? this.lineEntity : (models.avro.LineEntity) defaultValue(fields()[0]);
        }
        if (gamePeriodBuilder != null) {
          try {
            record.gamePeriod = this.gamePeriodBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("gamePeriod"));
            throw e;
          }
        } else {
          record.gamePeriod = fieldSetFlags()[1] ? this.gamePeriod : (models.avro.GamePeriod) defaultValue(fields()[1]);
        }
        record.home = fieldSetFlags()[2] ? this.home : (Integer) defaultValue(fields()[2]);
        record.away = fieldSetFlags()[3] ? this.away : (Integer) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LiveScores>
    WRITER$ = (org.apache.avro.io.DatumWriter<LiveScores>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LiveScores>
    READER$ = (org.apache.avro.io.DatumReader<LiveScores>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.lineEntity == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.lineEntity.customEncode(out);
    }

    if (this.gamePeriod == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.gamePeriod.customEncode(out);
    }

    if (this.home == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.home);
    }

    if (this.away == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.away);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.lineEntity = null;
      } else {
        if (this.lineEntity == null) {
          this.lineEntity = new models.avro.LineEntity();
        }
        this.lineEntity.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.gamePeriod = null;
      } else {
        if (this.gamePeriod == null) {
          this.gamePeriod = new models.avro.GamePeriod();
        }
        this.gamePeriod.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.home = null;
      } else {
        this.home = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.away = null;
      } else {
        this.away = in.readInt();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lineEntity = null;
          } else {
            if (this.lineEntity == null) {
              this.lineEntity = new models.avro.LineEntity();
            }
            this.lineEntity.customDecode(in);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.gamePeriod = null;
          } else {
            if (this.gamePeriod == null) {
              this.gamePeriod = new models.avro.GamePeriod();
            }
            this.gamePeriod.customDecode(in);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.home = null;
          } else {
            this.home = in.readInt();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.away = null;
          } else {
            this.away = in.readInt();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










