/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package models.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class MarketConsumeMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 9203539890897456717L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MarketConsumeMessage\",\"namespace\":\"models.avro\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"eventId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"isHidden\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"updatedAt\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"gamePeriodId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"index\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"isSuspended\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lineEntityId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"marketKey\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"marketTypeId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"spread\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"isValid\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"producedTime\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"liveScores\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Odd\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"key\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"isValid\",\"type\":[\"null\",\"int\"],\"default\":null}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MarketConsumeMessage> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MarketConsumeMessage> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MarketConsumeMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MarketConsumeMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MarketConsumeMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MarketConsumeMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MarketConsumeMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MarketConsumeMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MarketConsumeMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private CharSequence id;
  private CharSequence eventId;
  private CharSequence isHidden;
  private CharSequence updatedAt;
  private CharSequence gamePeriodId;
  private Integer index;
  private CharSequence isSuspended;
  private CharSequence lineEntityId;
  private CharSequence marketKey;
  private CharSequence marketTypeId;
  private Double spread;
  private Integer isValid;
  private CharSequence producedTime;
  private java.util.List<models.avro.Odd> liveScores;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MarketConsumeMessage() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param eventId The new value for eventId
   * @param isHidden The new value for isHidden
   * @param updatedAt The new value for updatedAt
   * @param gamePeriodId The new value for gamePeriodId
   * @param index The new value for index
   * @param isSuspended The new value for isSuspended
   * @param lineEntityId The new value for lineEntityId
   * @param marketKey The new value for marketKey
   * @param marketTypeId The new value for marketTypeId
   * @param spread The new value for spread
   * @param isValid The new value for isValid
   * @param producedTime The new value for producedTime
   * @param liveScores The new value for liveScores
   */
  public MarketConsumeMessage(CharSequence id, CharSequence eventId, CharSequence isHidden, CharSequence updatedAt, CharSequence gamePeriodId, Integer index, CharSequence isSuspended, CharSequence lineEntityId, CharSequence marketKey, CharSequence marketTypeId, Double spread, Integer isValid, CharSequence producedTime, java.util.List<models.avro.Odd> liveScores) {
    this.id = id;
    this.eventId = eventId;
    this.isHidden = isHidden;
    this.updatedAt = updatedAt;
    this.gamePeriodId = gamePeriodId;
    this.index = index;
    this.isSuspended = isSuspended;
    this.lineEntityId = lineEntityId;
    this.marketKey = marketKey;
    this.marketTypeId = marketTypeId;
    this.spread = spread;
    this.isValid = isValid;
    this.producedTime = producedTime;
    this.liveScores = liveScores;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return eventId;
    case 2: return isHidden;
    case 3: return updatedAt;
    case 4: return gamePeriodId;
    case 5: return index;
    case 6: return isSuspended;
    case 7: return lineEntityId;
    case 8: return marketKey;
    case 9: return marketTypeId;
    case 10: return spread;
    case 11: return isValid;
    case 12: return producedTime;
    case 13: return liveScores;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (CharSequence)value$; break;
    case 1: eventId = (CharSequence)value$; break;
    case 2: isHidden = (CharSequence)value$; break;
    case 3: updatedAt = (CharSequence)value$; break;
    case 4: gamePeriodId = (CharSequence)value$; break;
    case 5: index = (Integer)value$; break;
    case 6: isSuspended = (CharSequence)value$; break;
    case 7: lineEntityId = (CharSequence)value$; break;
    case 8: marketKey = (CharSequence)value$; break;
    case 9: marketTypeId = (CharSequence)value$; break;
    case 10: spread = (Double)value$; break;
    case 11: isValid = (Integer)value$; break;
    case 12: producedTime = (CharSequence)value$; break;
    case 13: liveScores = (java.util.List<models.avro.Odd>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public CharSequence getEventId() {
    return eventId;
  }


  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(CharSequence value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'isHidden' field.
   * @return The value of the 'isHidden' field.
   */
  public CharSequence getIsHidden() {
    return isHidden;
  }


  /**
   * Sets the value of the 'isHidden' field.
   * @param value the value to set.
   */
  public void setIsHidden(CharSequence value) {
    this.isHidden = value;
  }

  /**
   * Gets the value of the 'updatedAt' field.
   * @return The value of the 'updatedAt' field.
   */
  public CharSequence getUpdatedAt() {
    return updatedAt;
  }


  /**
   * Sets the value of the 'updatedAt' field.
   * @param value the value to set.
   */
  public void setUpdatedAt(CharSequence value) {
    this.updatedAt = value;
  }

  /**
   * Gets the value of the 'gamePeriodId' field.
   * @return The value of the 'gamePeriodId' field.
   */
  public CharSequence getGamePeriodId() {
    return gamePeriodId;
  }


  /**
   * Sets the value of the 'gamePeriodId' field.
   * @param value the value to set.
   */
  public void setGamePeriodId(CharSequence value) {
    this.gamePeriodId = value;
  }

  /**
   * Gets the value of the 'index' field.
   * @return The value of the 'index' field.
   */
  public Integer getIndex() {
    return index;
  }


  /**
   * Sets the value of the 'index' field.
   * @param value the value to set.
   */
  public void setIndex(Integer value) {
    this.index = value;
  }

  /**
   * Gets the value of the 'isSuspended' field.
   * @return The value of the 'isSuspended' field.
   */
  public CharSequence getIsSuspended() {
    return isSuspended;
  }


  /**
   * Sets the value of the 'isSuspended' field.
   * @param value the value to set.
   */
  public void setIsSuspended(CharSequence value) {
    this.isSuspended = value;
  }

  /**
   * Gets the value of the 'lineEntityId' field.
   * @return The value of the 'lineEntityId' field.
   */
  public CharSequence getLineEntityId() {
    return lineEntityId;
  }


  /**
   * Sets the value of the 'lineEntityId' field.
   * @param value the value to set.
   */
  public void setLineEntityId(CharSequence value) {
    this.lineEntityId = value;
  }

  /**
   * Gets the value of the 'marketKey' field.
   * @return The value of the 'marketKey' field.
   */
  public CharSequence getMarketKey() {
    return marketKey;
  }


  /**
   * Sets the value of the 'marketKey' field.
   * @param value the value to set.
   */
  public void setMarketKey(CharSequence value) {
    this.marketKey = value;
  }

  /**
   * Gets the value of the 'marketTypeId' field.
   * @return The value of the 'marketTypeId' field.
   */
  public CharSequence getMarketTypeId() {
    return marketTypeId;
  }


  /**
   * Sets the value of the 'marketTypeId' field.
   * @param value the value to set.
   */
  public void setMarketTypeId(CharSequence value) {
    this.marketTypeId = value;
  }

  /**
   * Gets the value of the 'spread' field.
   * @return The value of the 'spread' field.
   */
  public Double getSpread() {
    return spread;
  }


  /**
   * Sets the value of the 'spread' field.
   * @param value the value to set.
   */
  public void setSpread(Double value) {
    this.spread = value;
  }

  /**
   * Gets the value of the 'isValid' field.
   * @return The value of the 'isValid' field.
   */
  public Integer getIsValid() {
    return isValid;
  }


  /**
   * Sets the value of the 'isValid' field.
   * @param value the value to set.
   */
  public void setIsValid(Integer value) {
    this.isValid = value;
  }

  /**
   * Gets the value of the 'producedTime' field.
   * @return The value of the 'producedTime' field.
   */
  public CharSequence getProducedTime() {
    return producedTime;
  }


  /**
   * Sets the value of the 'producedTime' field.
   * @param value the value to set.
   */
  public void setProducedTime(CharSequence value) {
    this.producedTime = value;
  }

  /**
   * Gets the value of the 'liveScores' field.
   * @return The value of the 'liveScores' field.
   */
  public java.util.List<models.avro.Odd> getLiveScores() {
    return liveScores;
  }


  /**
   * Sets the value of the 'liveScores' field.
   * @param value the value to set.
   */
  public void setLiveScores(java.util.List<models.avro.Odd> value) {
    this.liveScores = value;
  }

  /**
   * Creates a new MarketConsumeMessage RecordBuilder.
   * @return A new MarketConsumeMessage RecordBuilder
   */
  public static models.avro.MarketConsumeMessage.Builder newBuilder() {
    return new models.avro.MarketConsumeMessage.Builder();
  }

  /**
   * Creates a new MarketConsumeMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MarketConsumeMessage RecordBuilder
   */
  public static models.avro.MarketConsumeMessage.Builder newBuilder(models.avro.MarketConsumeMessage.Builder other) {
    if (other == null) {
      return new models.avro.MarketConsumeMessage.Builder();
    } else {
      return new models.avro.MarketConsumeMessage.Builder(other);
    }
  }

  /**
   * Creates a new MarketConsumeMessage RecordBuilder by copying an existing MarketConsumeMessage instance.
   * @param other The existing instance to copy.
   * @return A new MarketConsumeMessage RecordBuilder
   */
  public static models.avro.MarketConsumeMessage.Builder newBuilder(models.avro.MarketConsumeMessage other) {
    if (other == null) {
      return new models.avro.MarketConsumeMessage.Builder();
    } else {
      return new models.avro.MarketConsumeMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for MarketConsumeMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MarketConsumeMessage>
    implements org.apache.avro.data.RecordBuilder<MarketConsumeMessage> {

    private CharSequence id;
    private CharSequence eventId;
    private CharSequence isHidden;
    private CharSequence updatedAt;
    private CharSequence gamePeriodId;
    private Integer index;
    private CharSequence isSuspended;
    private CharSequence lineEntityId;
    private CharSequence marketKey;
    private CharSequence marketTypeId;
    private Double spread;
    private Integer isValid;
    private CharSequence producedTime;
    private java.util.List<models.avro.Odd> liveScores;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(models.avro.MarketConsumeMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.eventId)) {
        this.eventId = data().deepCopy(fields()[1].schema(), other.eventId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.isHidden)) {
        this.isHidden = data().deepCopy(fields()[2].schema(), other.isHidden);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[3].schema(), other.updatedAt);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.gamePeriodId)) {
        this.gamePeriodId = data().deepCopy(fields()[4].schema(), other.gamePeriodId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.index)) {
        this.index = data().deepCopy(fields()[5].schema(), other.index);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.isSuspended)) {
        this.isSuspended = data().deepCopy(fields()[6].schema(), other.isSuspended);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.lineEntityId)) {
        this.lineEntityId = data().deepCopy(fields()[7].schema(), other.lineEntityId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.marketKey)) {
        this.marketKey = data().deepCopy(fields()[8].schema(), other.marketKey);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.marketTypeId)) {
        this.marketTypeId = data().deepCopy(fields()[9].schema(), other.marketTypeId);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.spread)) {
        this.spread = data().deepCopy(fields()[10].schema(), other.spread);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.isValid)) {
        this.isValid = data().deepCopy(fields()[11].schema(), other.isValid);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.producedTime)) {
        this.producedTime = data().deepCopy(fields()[12].schema(), other.producedTime);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.liveScores)) {
        this.liveScores = data().deepCopy(fields()[13].schema(), other.liveScores);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
    }

    /**
     * Creates a Builder by copying an existing MarketConsumeMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(models.avro.MarketConsumeMessage other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventId)) {
        this.eventId = data().deepCopy(fields()[1].schema(), other.eventId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isHidden)) {
        this.isHidden = data().deepCopy(fields()[2].schema(), other.isHidden);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[3].schema(), other.updatedAt);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gamePeriodId)) {
        this.gamePeriodId = data().deepCopy(fields()[4].schema(), other.gamePeriodId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.index)) {
        this.index = data().deepCopy(fields()[5].schema(), other.index);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.isSuspended)) {
        this.isSuspended = data().deepCopy(fields()[6].schema(), other.isSuspended);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.lineEntityId)) {
        this.lineEntityId = data().deepCopy(fields()[7].schema(), other.lineEntityId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.marketKey)) {
        this.marketKey = data().deepCopy(fields()[8].schema(), other.marketKey);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.marketTypeId)) {
        this.marketTypeId = data().deepCopy(fields()[9].schema(), other.marketTypeId);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.spread)) {
        this.spread = data().deepCopy(fields()[10].schema(), other.spread);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.isValid)) {
        this.isValid = data().deepCopy(fields()[11].schema(), other.isValid);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.producedTime)) {
        this.producedTime = data().deepCopy(fields()[12].schema(), other.producedTime);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.liveScores)) {
        this.liveScores = data().deepCopy(fields()[13].schema(), other.liveScores);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder setId(CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public CharSequence getEventId() {
      return eventId;
    }


    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder setEventId(CharSequence value) {
      validate(fields()[1], value);
      this.eventId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'isHidden' field.
      * @return The value.
      */
    public CharSequence getIsHidden() {
      return isHidden;
    }


    /**
      * Sets the value of the 'isHidden' field.
      * @param value The value of 'isHidden'.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder setIsHidden(CharSequence value) {
      validate(fields()[2], value);
      this.isHidden = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'isHidden' field has been set.
      * @return True if the 'isHidden' field has been set, false otherwise.
      */
    public boolean hasIsHidden() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'isHidden' field.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder clearIsHidden() {
      isHidden = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      * @return The value.
      */
    public CharSequence getUpdatedAt() {
      return updatedAt;
    }


    /**
      * Sets the value of the 'updatedAt' field.
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder setUpdatedAt(CharSequence value) {
      validate(fields()[3], value);
      this.updatedAt = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder clearUpdatedAt() {
      updatedAt = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'gamePeriodId' field.
      * @return The value.
      */
    public CharSequence getGamePeriodId() {
      return gamePeriodId;
    }


    /**
      * Sets the value of the 'gamePeriodId' field.
      * @param value The value of 'gamePeriodId'.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder setGamePeriodId(CharSequence value) {
      validate(fields()[4], value);
      this.gamePeriodId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'gamePeriodId' field has been set.
      * @return True if the 'gamePeriodId' field has been set, false otherwise.
      */
    public boolean hasGamePeriodId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'gamePeriodId' field.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder clearGamePeriodId() {
      gamePeriodId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'index' field.
      * @return The value.
      */
    public Integer getIndex() {
      return index;
    }


    /**
      * Sets the value of the 'index' field.
      * @param value The value of 'index'.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder setIndex(Integer value) {
      validate(fields()[5], value);
      this.index = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'index' field has been set.
      * @return True if the 'index' field has been set, false otherwise.
      */
    public boolean hasIndex() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'index' field.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder clearIndex() {
      index = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'isSuspended' field.
      * @return The value.
      */
    public CharSequence getIsSuspended() {
      return isSuspended;
    }


    /**
      * Sets the value of the 'isSuspended' field.
      * @param value The value of 'isSuspended'.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder setIsSuspended(CharSequence value) {
      validate(fields()[6], value);
      this.isSuspended = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'isSuspended' field has been set.
      * @return True if the 'isSuspended' field has been set, false otherwise.
      */
    public boolean hasIsSuspended() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'isSuspended' field.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder clearIsSuspended() {
      isSuspended = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'lineEntityId' field.
      * @return The value.
      */
    public CharSequence getLineEntityId() {
      return lineEntityId;
    }


    /**
      * Sets the value of the 'lineEntityId' field.
      * @param value The value of 'lineEntityId'.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder setLineEntityId(CharSequence value) {
      validate(fields()[7], value);
      this.lineEntityId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'lineEntityId' field has been set.
      * @return True if the 'lineEntityId' field has been set, false otherwise.
      */
    public boolean hasLineEntityId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'lineEntityId' field.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder clearLineEntityId() {
      lineEntityId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'marketKey' field.
      * @return The value.
      */
    public CharSequence getMarketKey() {
      return marketKey;
    }


    /**
      * Sets the value of the 'marketKey' field.
      * @param value The value of 'marketKey'.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder setMarketKey(CharSequence value) {
      validate(fields()[8], value);
      this.marketKey = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'marketKey' field has been set.
      * @return True if the 'marketKey' field has been set, false otherwise.
      */
    public boolean hasMarketKey() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'marketKey' field.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder clearMarketKey() {
      marketKey = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'marketTypeId' field.
      * @return The value.
      */
    public CharSequence getMarketTypeId() {
      return marketTypeId;
    }


    /**
      * Sets the value of the 'marketTypeId' field.
      * @param value The value of 'marketTypeId'.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder setMarketTypeId(CharSequence value) {
      validate(fields()[9], value);
      this.marketTypeId = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'marketTypeId' field has been set.
      * @return True if the 'marketTypeId' field has been set, false otherwise.
      */
    public boolean hasMarketTypeId() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'marketTypeId' field.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder clearMarketTypeId() {
      marketTypeId = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'spread' field.
      * @return The value.
      */
    public Double getSpread() {
      return spread;
    }


    /**
      * Sets the value of the 'spread' field.
      * @param value The value of 'spread'.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder setSpread(Double value) {
      validate(fields()[10], value);
      this.spread = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'spread' field has been set.
      * @return True if the 'spread' field has been set, false otherwise.
      */
    public boolean hasSpread() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'spread' field.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder clearSpread() {
      spread = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'isValid' field.
      * @return The value.
      */
    public Integer getIsValid() {
      return isValid;
    }


    /**
      * Sets the value of the 'isValid' field.
      * @param value The value of 'isValid'.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder setIsValid(Integer value) {
      validate(fields()[11], value);
      this.isValid = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'isValid' field has been set.
      * @return True if the 'isValid' field has been set, false otherwise.
      */
    public boolean hasIsValid() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'isValid' field.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder clearIsValid() {
      isValid = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'producedTime' field.
      * @return The value.
      */
    public CharSequence getProducedTime() {
      return producedTime;
    }


    /**
      * Sets the value of the 'producedTime' field.
      * @param value The value of 'producedTime'.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder setProducedTime(CharSequence value) {
      validate(fields()[12], value);
      this.producedTime = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'producedTime' field has been set.
      * @return True if the 'producedTime' field has been set, false otherwise.
      */
    public boolean hasProducedTime() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'producedTime' field.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder clearProducedTime() {
      producedTime = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'liveScores' field.
      * @return The value.
      */
    public java.util.List<models.avro.Odd> getLiveScores() {
      return liveScores;
    }


    /**
      * Sets the value of the 'liveScores' field.
      * @param value The value of 'liveScores'.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder setLiveScores(java.util.List<models.avro.Odd> value) {
      validate(fields()[13], value);
      this.liveScores = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'liveScores' field has been set.
      * @return True if the 'liveScores' field has been set, false otherwise.
      */
    public boolean hasLiveScores() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'liveScores' field.
      * @return This builder.
      */
    public models.avro.MarketConsumeMessage.Builder clearLiveScores() {
      liveScores = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MarketConsumeMessage build() {
      try {
        MarketConsumeMessage record = new MarketConsumeMessage();
        record.id = fieldSetFlags()[0] ? this.id : (CharSequence) defaultValue(fields()[0]);
        record.eventId = fieldSetFlags()[1] ? this.eventId : (CharSequence) defaultValue(fields()[1]);
        record.isHidden = fieldSetFlags()[2] ? this.isHidden : (CharSequence) defaultValue(fields()[2]);
        record.updatedAt = fieldSetFlags()[3] ? this.updatedAt : (CharSequence) defaultValue(fields()[3]);
        record.gamePeriodId = fieldSetFlags()[4] ? this.gamePeriodId : (CharSequence) defaultValue(fields()[4]);
        record.index = fieldSetFlags()[5] ? this.index : (Integer) defaultValue(fields()[5]);
        record.isSuspended = fieldSetFlags()[6] ? this.isSuspended : (CharSequence) defaultValue(fields()[6]);
        record.lineEntityId = fieldSetFlags()[7] ? this.lineEntityId : (CharSequence) defaultValue(fields()[7]);
        record.marketKey = fieldSetFlags()[8] ? this.marketKey : (CharSequence) defaultValue(fields()[8]);
        record.marketTypeId = fieldSetFlags()[9] ? this.marketTypeId : (CharSequence) defaultValue(fields()[9]);
        record.spread = fieldSetFlags()[10] ? this.spread : (Double) defaultValue(fields()[10]);
        record.isValid = fieldSetFlags()[11] ? this.isValid : (Integer) defaultValue(fields()[11]);
        record.producedTime = fieldSetFlags()[12] ? this.producedTime : (CharSequence) defaultValue(fields()[12]);
        record.liveScores = fieldSetFlags()[13] ? this.liveScores : (java.util.List<models.avro.Odd>) defaultValue(fields()[13]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MarketConsumeMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<MarketConsumeMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MarketConsumeMessage>
    READER$ = (org.apache.avro.io.DatumReader<MarketConsumeMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id);
    }

    if (this.eventId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.eventId);
    }

    if (this.isHidden == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.isHidden);
    }

    if (this.updatedAt == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.updatedAt);
    }

    if (this.gamePeriodId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.gamePeriodId);
    }

    if (this.index == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.index);
    }

    if (this.isSuspended == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.isSuspended);
    }

    if (this.lineEntityId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.lineEntityId);
    }

    if (this.marketKey == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.marketKey);
    }

    if (this.marketTypeId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.marketTypeId);
    }

    if (this.spread == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.spread);
    }

    if (this.isValid == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.isValid);
    }

    if (this.producedTime == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.producedTime);
    }

    if (this.liveScores == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.liveScores.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (models.avro.Odd e0: this.liveScores) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.eventId = null;
      } else {
        this.eventId = in.readString(this.eventId instanceof Utf8 ? (Utf8)this.eventId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.isHidden = null;
      } else {
        this.isHidden = in.readString(this.isHidden instanceof Utf8 ? (Utf8)this.isHidden : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.updatedAt = null;
      } else {
        this.updatedAt = in.readString(this.updatedAt instanceof Utf8 ? (Utf8)this.updatedAt : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.gamePeriodId = null;
      } else {
        this.gamePeriodId = in.readString(this.gamePeriodId instanceof Utf8 ? (Utf8)this.gamePeriodId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.index = null;
      } else {
        this.index = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.isSuspended = null;
      } else {
        this.isSuspended = in.readString(this.isSuspended instanceof Utf8 ? (Utf8)this.isSuspended : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.lineEntityId = null;
      } else {
        this.lineEntityId = in.readString(this.lineEntityId instanceof Utf8 ? (Utf8)this.lineEntityId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.marketKey = null;
      } else {
        this.marketKey = in.readString(this.marketKey instanceof Utf8 ? (Utf8)this.marketKey : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.marketTypeId = null;
      } else {
        this.marketTypeId = in.readString(this.marketTypeId instanceof Utf8 ? (Utf8)this.marketTypeId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.spread = null;
      } else {
        this.spread = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.isValid = null;
      } else {
        this.isValid = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.producedTime = null;
      } else {
        this.producedTime = in.readString(this.producedTime instanceof Utf8 ? (Utf8)this.producedTime : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.liveScores = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<models.avro.Odd> a0 = this.liveScores;
        if (a0 == null) {
          a0 = new SpecificData.Array<models.avro.Odd>((int)size0, SCHEMA$.getField("liveScores").schema().getTypes().get(1));
          this.liveScores = a0;
        } else a0.clear();
        SpecificData.Array<models.avro.Odd> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<models.avro.Odd>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            models.avro.Odd e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new models.avro.Odd();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

    } else {
      for (int i = 0; i < 14; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.eventId = null;
          } else {
            this.eventId = in.readString(this.eventId instanceof Utf8 ? (Utf8)this.eventId : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.isHidden = null;
          } else {
            this.isHidden = in.readString(this.isHidden instanceof Utf8 ? (Utf8)this.isHidden : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.updatedAt = null;
          } else {
            this.updatedAt = in.readString(this.updatedAt instanceof Utf8 ? (Utf8)this.updatedAt : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.gamePeriodId = null;
          } else {
            this.gamePeriodId = in.readString(this.gamePeriodId instanceof Utf8 ? (Utf8)this.gamePeriodId : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.index = null;
          } else {
            this.index = in.readInt();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.isSuspended = null;
          } else {
            this.isSuspended = in.readString(this.isSuspended instanceof Utf8 ? (Utf8)this.isSuspended : null);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lineEntityId = null;
          } else {
            this.lineEntityId = in.readString(this.lineEntityId instanceof Utf8 ? (Utf8)this.lineEntityId : null);
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.marketKey = null;
          } else {
            this.marketKey = in.readString(this.marketKey instanceof Utf8 ? (Utf8)this.marketKey : null);
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.marketTypeId = null;
          } else {
            this.marketTypeId = in.readString(this.marketTypeId instanceof Utf8 ? (Utf8)this.marketTypeId : null);
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.spread = null;
          } else {
            this.spread = in.readDouble();
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.isValid = null;
          } else {
            this.isValid = in.readInt();
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.producedTime = null;
          } else {
            this.producedTime = in.readString(this.producedTime instanceof Utf8 ? (Utf8)this.producedTime : null);
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.liveScores = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<models.avro.Odd> a0 = this.liveScores;
            if (a0 == null) {
              a0 = new SpecificData.Array<models.avro.Odd>((int)size0, SCHEMA$.getField("liveScores").schema().getTypes().get(1));
              this.liveScores = a0;
            } else a0.clear();
            SpecificData.Array<models.avro.Odd> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<models.avro.Odd>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                models.avro.Odd e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new models.avro.Odd();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










