/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package models.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class LineInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -424006983262160020L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LineInfo\",\"namespace\":\"models.avro\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"index\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"updatedAt\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"marketType\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"MarketType\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"lineEntity\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LineEntity\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"gamePeriod\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"GamePeriod\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"isValid\",\"type\":[\"null\",\"boolean\"],\"default\":null},{\"name\":\"spread\",\"type\":[\"null\",\"double\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LineInfo> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LineInfo> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LineInfo> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LineInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LineInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LineInfo to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LineInfo from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LineInfo instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LineInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private CharSequence id;
  private Integer index;
  private CharSequence updatedAt;
  private models.avro.MarketType marketType;
  private models.avro.LineEntity lineEntity;
  private models.avro.GamePeriod gamePeriod;
  private Boolean isValid;
  private Double spread;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LineInfo() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param index The new value for index
   * @param updatedAt The new value for updatedAt
   * @param marketType The new value for marketType
   * @param lineEntity The new value for lineEntity
   * @param gamePeriod The new value for gamePeriod
   * @param isValid The new value for isValid
   * @param spread The new value for spread
   */
  public LineInfo(CharSequence id, Integer index, CharSequence updatedAt, models.avro.MarketType marketType, models.avro.LineEntity lineEntity, models.avro.GamePeriod gamePeriod, Boolean isValid, Double spread) {
    this.id = id;
    this.index = index;
    this.updatedAt = updatedAt;
    this.marketType = marketType;
    this.lineEntity = lineEntity;
    this.gamePeriod = gamePeriod;
    this.isValid = isValid;
    this.spread = spread;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return index;
    case 2: return updatedAt;
    case 3: return marketType;
    case 4: return lineEntity;
    case 5: return gamePeriod;
    case 6: return isValid;
    case 7: return spread;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (CharSequence)value$; break;
    case 1: index = (Integer)value$; break;
    case 2: updatedAt = (CharSequence)value$; break;
    case 3: marketType = (models.avro.MarketType)value$; break;
    case 4: lineEntity = (models.avro.LineEntity)value$; break;
    case 5: gamePeriod = (models.avro.GamePeriod)value$; break;
    case 6: isValid = (Boolean)value$; break;
    case 7: spread = (Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'index' field.
   * @return The value of the 'index' field.
   */
  public Integer getIndex() {
    return index;
  }


  /**
   * Sets the value of the 'index' field.
   * @param value the value to set.
   */
  public void setIndex(Integer value) {
    this.index = value;
  }

  /**
   * Gets the value of the 'updatedAt' field.
   * @return The value of the 'updatedAt' field.
   */
  public CharSequence getUpdatedAt() {
    return updatedAt;
  }


  /**
   * Sets the value of the 'updatedAt' field.
   * @param value the value to set.
   */
  public void setUpdatedAt(CharSequence value) {
    this.updatedAt = value;
  }

  /**
   * Gets the value of the 'marketType' field.
   * @return The value of the 'marketType' field.
   */
  public models.avro.MarketType getMarketType() {
    return marketType;
  }


  /**
   * Sets the value of the 'marketType' field.
   * @param value the value to set.
   */
  public void setMarketType(models.avro.MarketType value) {
    this.marketType = value;
  }

  /**
   * Gets the value of the 'lineEntity' field.
   * @return The value of the 'lineEntity' field.
   */
  public models.avro.LineEntity getLineEntity() {
    return lineEntity;
  }


  /**
   * Sets the value of the 'lineEntity' field.
   * @param value the value to set.
   */
  public void setLineEntity(models.avro.LineEntity value) {
    this.lineEntity = value;
  }

  /**
   * Gets the value of the 'gamePeriod' field.
   * @return The value of the 'gamePeriod' field.
   */
  public models.avro.GamePeriod getGamePeriod() {
    return gamePeriod;
  }


  /**
   * Sets the value of the 'gamePeriod' field.
   * @param value the value to set.
   */
  public void setGamePeriod(models.avro.GamePeriod value) {
    this.gamePeriod = value;
  }

  /**
   * Gets the value of the 'isValid' field.
   * @return The value of the 'isValid' field.
   */
  public Boolean getIsValid() {
    return isValid;
  }


  /**
   * Sets the value of the 'isValid' field.
   * @param value the value to set.
   */
  public void setIsValid(Boolean value) {
    this.isValid = value;
  }

  /**
   * Gets the value of the 'spread' field.
   * @return The value of the 'spread' field.
   */
  public Double getSpread() {
    return spread;
  }


  /**
   * Sets the value of the 'spread' field.
   * @param value the value to set.
   */
  public void setSpread(Double value) {
    this.spread = value;
  }

  /**
   * Creates a new LineInfo RecordBuilder.
   * @return A new LineInfo RecordBuilder
   */
  public static models.avro.LineInfo.Builder newBuilder() {
    return new models.avro.LineInfo.Builder();
  }

  /**
   * Creates a new LineInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LineInfo RecordBuilder
   */
  public static models.avro.LineInfo.Builder newBuilder(models.avro.LineInfo.Builder other) {
    if (other == null) {
      return new models.avro.LineInfo.Builder();
    } else {
      return new models.avro.LineInfo.Builder(other);
    }
  }

  /**
   * Creates a new LineInfo RecordBuilder by copying an existing LineInfo instance.
   * @param other The existing instance to copy.
   * @return A new LineInfo RecordBuilder
   */
  public static models.avro.LineInfo.Builder newBuilder(models.avro.LineInfo other) {
    if (other == null) {
      return new models.avro.LineInfo.Builder();
    } else {
      return new models.avro.LineInfo.Builder(other);
    }
  }

  /**
   * RecordBuilder for LineInfo instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LineInfo>
    implements org.apache.avro.data.RecordBuilder<LineInfo> {

    private CharSequence id;
    private Integer index;
    private CharSequence updatedAt;
    private models.avro.MarketType marketType;
    private models.avro.MarketType.Builder marketTypeBuilder;
    private models.avro.LineEntity lineEntity;
    private models.avro.LineEntity.Builder lineEntityBuilder;
    private models.avro.GamePeriod gamePeriod;
    private models.avro.GamePeriod.Builder gamePeriodBuilder;
    private Boolean isValid;
    private Double spread;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(models.avro.LineInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.index)) {
        this.index = data().deepCopy(fields()[1].schema(), other.index);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[2].schema(), other.updatedAt);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.marketType)) {
        this.marketType = data().deepCopy(fields()[3].schema(), other.marketType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasMarketTypeBuilder()) {
        this.marketTypeBuilder = models.avro.MarketType.newBuilder(other.getMarketTypeBuilder());
      }
      if (isValidValue(fields()[4], other.lineEntity)) {
        this.lineEntity = data().deepCopy(fields()[4].schema(), other.lineEntity);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasLineEntityBuilder()) {
        this.lineEntityBuilder = models.avro.LineEntity.newBuilder(other.getLineEntityBuilder());
      }
      if (isValidValue(fields()[5], other.gamePeriod)) {
        this.gamePeriod = data().deepCopy(fields()[5].schema(), other.gamePeriod);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasGamePeriodBuilder()) {
        this.gamePeriodBuilder = models.avro.GamePeriod.newBuilder(other.getGamePeriodBuilder());
      }
      if (isValidValue(fields()[6], other.isValid)) {
        this.isValid = data().deepCopy(fields()[6].schema(), other.isValid);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.spread)) {
        this.spread = data().deepCopy(fields()[7].schema(), other.spread);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing LineInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(models.avro.LineInfo other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.index)) {
        this.index = data().deepCopy(fields()[1].schema(), other.index);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.updatedAt)) {
        this.updatedAt = data().deepCopy(fields()[2].schema(), other.updatedAt);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.marketType)) {
        this.marketType = data().deepCopy(fields()[3].schema(), other.marketType);
        fieldSetFlags()[3] = true;
      }
      this.marketTypeBuilder = null;
      if (isValidValue(fields()[4], other.lineEntity)) {
        this.lineEntity = data().deepCopy(fields()[4].schema(), other.lineEntity);
        fieldSetFlags()[4] = true;
      }
      this.lineEntityBuilder = null;
      if (isValidValue(fields()[5], other.gamePeriod)) {
        this.gamePeriod = data().deepCopy(fields()[5].schema(), other.gamePeriod);
        fieldSetFlags()[5] = true;
      }
      this.gamePeriodBuilder = null;
      if (isValidValue(fields()[6], other.isValid)) {
        this.isValid = data().deepCopy(fields()[6].schema(), other.isValid);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.spread)) {
        this.spread = data().deepCopy(fields()[7].schema(), other.spread);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public models.avro.LineInfo.Builder setId(CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public models.avro.LineInfo.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'index' field.
      * @return The value.
      */
    public Integer getIndex() {
      return index;
    }


    /**
      * Sets the value of the 'index' field.
      * @param value The value of 'index'.
      * @return This builder.
      */
    public models.avro.LineInfo.Builder setIndex(Integer value) {
      validate(fields()[1], value);
      this.index = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'index' field has been set.
      * @return True if the 'index' field has been set, false otherwise.
      */
    public boolean hasIndex() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'index' field.
      * @return This builder.
      */
    public models.avro.LineInfo.Builder clearIndex() {
      index = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedAt' field.
      * @return The value.
      */
    public CharSequence getUpdatedAt() {
      return updatedAt;
    }


    /**
      * Sets the value of the 'updatedAt' field.
      * @param value The value of 'updatedAt'.
      * @return This builder.
      */
    public models.avro.LineInfo.Builder setUpdatedAt(CharSequence value) {
      validate(fields()[2], value);
      this.updatedAt = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedAt' field has been set.
      * @return True if the 'updatedAt' field has been set, false otherwise.
      */
    public boolean hasUpdatedAt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'updatedAt' field.
      * @return This builder.
      */
    public models.avro.LineInfo.Builder clearUpdatedAt() {
      updatedAt = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'marketType' field.
      * @return The value.
      */
    public models.avro.MarketType getMarketType() {
      return marketType;
    }


    /**
      * Sets the value of the 'marketType' field.
      * @param value The value of 'marketType'.
      * @return This builder.
      */
    public models.avro.LineInfo.Builder setMarketType(models.avro.MarketType value) {
      validate(fields()[3], value);
      this.marketTypeBuilder = null;
      this.marketType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'marketType' field has been set.
      * @return True if the 'marketType' field has been set, false otherwise.
      */
    public boolean hasMarketType() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'marketType' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public models.avro.MarketType.Builder getMarketTypeBuilder() {
      if (marketTypeBuilder == null) {
        if (hasMarketType()) {
          setMarketTypeBuilder(models.avro.MarketType.newBuilder(marketType));
        } else {
          setMarketTypeBuilder(models.avro.MarketType.newBuilder());
        }
      }
      return marketTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'marketType' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public models.avro.LineInfo.Builder setMarketTypeBuilder(models.avro.MarketType.Builder value) {
      clearMarketType();
      marketTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'marketType' field has an active Builder instance
     * @return True if the 'marketType' field has an active Builder instance
     */
    public boolean hasMarketTypeBuilder() {
      return marketTypeBuilder != null;
    }

    /**
      * Clears the value of the 'marketType' field.
      * @return This builder.
      */
    public models.avro.LineInfo.Builder clearMarketType() {
      marketType = null;
      marketTypeBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'lineEntity' field.
      * @return The value.
      */
    public models.avro.LineEntity getLineEntity() {
      return lineEntity;
    }


    /**
      * Sets the value of the 'lineEntity' field.
      * @param value The value of 'lineEntity'.
      * @return This builder.
      */
    public models.avro.LineInfo.Builder setLineEntity(models.avro.LineEntity value) {
      validate(fields()[4], value);
      this.lineEntityBuilder = null;
      this.lineEntity = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'lineEntity' field has been set.
      * @return True if the 'lineEntity' field has been set, false otherwise.
      */
    public boolean hasLineEntity() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'lineEntity' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public models.avro.LineEntity.Builder getLineEntityBuilder() {
      if (lineEntityBuilder == null) {
        if (hasLineEntity()) {
          setLineEntityBuilder(models.avro.LineEntity.newBuilder(lineEntity));
        } else {
          setLineEntityBuilder(models.avro.LineEntity.newBuilder());
        }
      }
      return lineEntityBuilder;
    }

    /**
     * Sets the Builder instance for the 'lineEntity' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public models.avro.LineInfo.Builder setLineEntityBuilder(models.avro.LineEntity.Builder value) {
      clearLineEntity();
      lineEntityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'lineEntity' field has an active Builder instance
     * @return True if the 'lineEntity' field has an active Builder instance
     */
    public boolean hasLineEntityBuilder() {
      return lineEntityBuilder != null;
    }

    /**
      * Clears the value of the 'lineEntity' field.
      * @return This builder.
      */
    public models.avro.LineInfo.Builder clearLineEntity() {
      lineEntity = null;
      lineEntityBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'gamePeriod' field.
      * @return The value.
      */
    public models.avro.GamePeriod getGamePeriod() {
      return gamePeriod;
    }


    /**
      * Sets the value of the 'gamePeriod' field.
      * @param value The value of 'gamePeriod'.
      * @return This builder.
      */
    public models.avro.LineInfo.Builder setGamePeriod(models.avro.GamePeriod value) {
      validate(fields()[5], value);
      this.gamePeriodBuilder = null;
      this.gamePeriod = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'gamePeriod' field has been set.
      * @return True if the 'gamePeriod' field has been set, false otherwise.
      */
    public boolean hasGamePeriod() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'gamePeriod' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public models.avro.GamePeriod.Builder getGamePeriodBuilder() {
      if (gamePeriodBuilder == null) {
        if (hasGamePeriod()) {
          setGamePeriodBuilder(models.avro.GamePeriod.newBuilder(gamePeriod));
        } else {
          setGamePeriodBuilder(models.avro.GamePeriod.newBuilder());
        }
      }
      return gamePeriodBuilder;
    }

    /**
     * Sets the Builder instance for the 'gamePeriod' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public models.avro.LineInfo.Builder setGamePeriodBuilder(models.avro.GamePeriod.Builder value) {
      clearGamePeriod();
      gamePeriodBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'gamePeriod' field has an active Builder instance
     * @return True if the 'gamePeriod' field has an active Builder instance
     */
    public boolean hasGamePeriodBuilder() {
      return gamePeriodBuilder != null;
    }

    /**
      * Clears the value of the 'gamePeriod' field.
      * @return This builder.
      */
    public models.avro.LineInfo.Builder clearGamePeriod() {
      gamePeriod = null;
      gamePeriodBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'isValid' field.
      * @return The value.
      */
    public Boolean getIsValid() {
      return isValid;
    }


    /**
      * Sets the value of the 'isValid' field.
      * @param value The value of 'isValid'.
      * @return This builder.
      */
    public models.avro.LineInfo.Builder setIsValid(Boolean value) {
      validate(fields()[6], value);
      this.isValid = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'isValid' field has been set.
      * @return True if the 'isValid' field has been set, false otherwise.
      */
    public boolean hasIsValid() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'isValid' field.
      * @return This builder.
      */
    public models.avro.LineInfo.Builder clearIsValid() {
      isValid = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'spread' field.
      * @return The value.
      */
    public Double getSpread() {
      return spread;
    }


    /**
      * Sets the value of the 'spread' field.
      * @param value The value of 'spread'.
      * @return This builder.
      */
    public models.avro.LineInfo.Builder setSpread(Double value) {
      validate(fields()[7], value);
      this.spread = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'spread' field has been set.
      * @return True if the 'spread' field has been set, false otherwise.
      */
    public boolean hasSpread() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'spread' field.
      * @return This builder.
      */
    public models.avro.LineInfo.Builder clearSpread() {
      spread = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LineInfo build() {
      try {
        LineInfo record = new LineInfo();
        record.id = fieldSetFlags()[0] ? this.id : (CharSequence) defaultValue(fields()[0]);
        record.index = fieldSetFlags()[1] ? this.index : (Integer) defaultValue(fields()[1]);
        record.updatedAt = fieldSetFlags()[2] ? this.updatedAt : (CharSequence) defaultValue(fields()[2]);
        if (marketTypeBuilder != null) {
          try {
            record.marketType = this.marketTypeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("marketType"));
            throw e;
          }
        } else {
          record.marketType = fieldSetFlags()[3] ? this.marketType : (models.avro.MarketType) defaultValue(fields()[3]);
        }
        if (lineEntityBuilder != null) {
          try {
            record.lineEntity = this.lineEntityBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("lineEntity"));
            throw e;
          }
        } else {
          record.lineEntity = fieldSetFlags()[4] ? this.lineEntity : (models.avro.LineEntity) defaultValue(fields()[4]);
        }
        if (gamePeriodBuilder != null) {
          try {
            record.gamePeriod = this.gamePeriodBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("gamePeriod"));
            throw e;
          }
        } else {
          record.gamePeriod = fieldSetFlags()[5] ? this.gamePeriod : (models.avro.GamePeriod) defaultValue(fields()[5]);
        }
        record.isValid = fieldSetFlags()[6] ? this.isValid : (Boolean) defaultValue(fields()[6]);
        record.spread = fieldSetFlags()[7] ? this.spread : (Double) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LineInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<LineInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LineInfo>
    READER$ = (org.apache.avro.io.DatumReader<LineInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id);
    }

    if (this.index == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.index);
    }

    if (this.updatedAt == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.updatedAt);
    }

    if (this.marketType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.marketType.customEncode(out);
    }

    if (this.lineEntity == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.lineEntity.customEncode(out);
    }

    if (this.gamePeriod == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.gamePeriod.customEncode(out);
    }

    if (this.isValid == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeBoolean(this.isValid);
    }

    if (this.spread == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.spread);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.index = null;
      } else {
        this.index = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.updatedAt = null;
      } else {
        this.updatedAt = in.readString(this.updatedAt instanceof Utf8 ? (Utf8)this.updatedAt : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.marketType = null;
      } else {
        if (this.marketType == null) {
          this.marketType = new models.avro.MarketType();
        }
        this.marketType.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.lineEntity = null;
      } else {
        if (this.lineEntity == null) {
          this.lineEntity = new models.avro.LineEntity();
        }
        this.lineEntity.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.gamePeriod = null;
      } else {
        if (this.gamePeriod == null) {
          this.gamePeriod = new models.avro.GamePeriod();
        }
        this.gamePeriod.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.isValid = null;
      } else {
        this.isValid = in.readBoolean();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.spread = null;
      } else {
        this.spread = in.readDouble();
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.index = null;
          } else {
            this.index = in.readInt();
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.updatedAt = null;
          } else {
            this.updatedAt = in.readString(this.updatedAt instanceof Utf8 ? (Utf8)this.updatedAt : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.marketType = null;
          } else {
            if (this.marketType == null) {
              this.marketType = new models.avro.MarketType();
            }
            this.marketType.customDecode(in);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lineEntity = null;
          } else {
            if (this.lineEntity == null) {
              this.lineEntity = new models.avro.LineEntity();
            }
            this.lineEntity.customDecode(in);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.gamePeriod = null;
          } else {
            if (this.gamePeriod == null) {
              this.gamePeriod = new models.avro.GamePeriod();
            }
            this.gamePeriod.customDecode(in);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.isValid = null;
          } else {
            this.isValid = in.readBoolean();
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.spread = null;
          } else {
            this.spread = in.readDouble();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










