/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package models.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class LiveScore extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7196089620122312332L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LiveScore\",\"namespace\":\"models.avro\",\"fields\":[{\"name\":\"lineEntityId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lineEntityName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"gamePeriodId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"gamePeriodName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"homeTeam\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"awayTeam\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LiveScore> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LiveScore> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LiveScore> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LiveScore> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LiveScore> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LiveScore to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LiveScore from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LiveScore instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LiveScore fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private CharSequence lineEntityId;
  private CharSequence lineEntityName;
  private CharSequence gamePeriodId;
  private CharSequence gamePeriodName;
  private Integer homeTeam;
  private Integer awayTeam;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LiveScore() {}

  /**
   * All-args constructor.
   * @param lineEntityId The new value for lineEntityId
   * @param lineEntityName The new value for lineEntityName
   * @param gamePeriodId The new value for gamePeriodId
   * @param gamePeriodName The new value for gamePeriodName
   * @param homeTeam The new value for homeTeam
   * @param awayTeam The new value for awayTeam
   */
  public LiveScore(CharSequence lineEntityId, CharSequence lineEntityName, CharSequence gamePeriodId, CharSequence gamePeriodName, Integer homeTeam, Integer awayTeam) {
    this.lineEntityId = lineEntityId;
    this.lineEntityName = lineEntityName;
    this.gamePeriodId = gamePeriodId;
    this.gamePeriodName = gamePeriodName;
    this.homeTeam = homeTeam;
    this.awayTeam = awayTeam;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return lineEntityId;
    case 1: return lineEntityName;
    case 2: return gamePeriodId;
    case 3: return gamePeriodName;
    case 4: return homeTeam;
    case 5: return awayTeam;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: lineEntityId = (CharSequence)value$; break;
    case 1: lineEntityName = (CharSequence)value$; break;
    case 2: gamePeriodId = (CharSequence)value$; break;
    case 3: gamePeriodName = (CharSequence)value$; break;
    case 4: homeTeam = (Integer)value$; break;
    case 5: awayTeam = (Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'lineEntityId' field.
   * @return The value of the 'lineEntityId' field.
   */
  public CharSequence getLineEntityId() {
    return lineEntityId;
  }


  /**
   * Sets the value of the 'lineEntityId' field.
   * @param value the value to set.
   */
  public void setLineEntityId(CharSequence value) {
    this.lineEntityId = value;
  }

  /**
   * Gets the value of the 'lineEntityName' field.
   * @return The value of the 'lineEntityName' field.
   */
  public CharSequence getLineEntityName() {
    return lineEntityName;
  }


  /**
   * Sets the value of the 'lineEntityName' field.
   * @param value the value to set.
   */
  public void setLineEntityName(CharSequence value) {
    this.lineEntityName = value;
  }

  /**
   * Gets the value of the 'gamePeriodId' field.
   * @return The value of the 'gamePeriodId' field.
   */
  public CharSequence getGamePeriodId() {
    return gamePeriodId;
  }


  /**
   * Sets the value of the 'gamePeriodId' field.
   * @param value the value to set.
   */
  public void setGamePeriodId(CharSequence value) {
    this.gamePeriodId = value;
  }

  /**
   * Gets the value of the 'gamePeriodName' field.
   * @return The value of the 'gamePeriodName' field.
   */
  public CharSequence getGamePeriodName() {
    return gamePeriodName;
  }


  /**
   * Sets the value of the 'gamePeriodName' field.
   * @param value the value to set.
   */
  public void setGamePeriodName(CharSequence value) {
    this.gamePeriodName = value;
  }

  /**
   * Gets the value of the 'homeTeam' field.
   * @return The value of the 'homeTeam' field.
   */
  public Integer getHomeTeam() {
    return homeTeam;
  }


  /**
   * Sets the value of the 'homeTeam' field.
   * @param value the value to set.
   */
  public void setHomeTeam(Integer value) {
    this.homeTeam = value;
  }

  /**
   * Gets the value of the 'awayTeam' field.
   * @return The value of the 'awayTeam' field.
   */
  public Integer getAwayTeam() {
    return awayTeam;
  }


  /**
   * Sets the value of the 'awayTeam' field.
   * @param value the value to set.
   */
  public void setAwayTeam(Integer value) {
    this.awayTeam = value;
  }

  /**
   * Creates a new LiveScore RecordBuilder.
   * @return A new LiveScore RecordBuilder
   */
  public static models.avro.LiveScore.Builder newBuilder() {
    return new models.avro.LiveScore.Builder();
  }

  /**
   * Creates a new LiveScore RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LiveScore RecordBuilder
   */
  public static models.avro.LiveScore.Builder newBuilder(models.avro.LiveScore.Builder other) {
    if (other == null) {
      return new models.avro.LiveScore.Builder();
    } else {
      return new models.avro.LiveScore.Builder(other);
    }
  }

  /**
   * Creates a new LiveScore RecordBuilder by copying an existing LiveScore instance.
   * @param other The existing instance to copy.
   * @return A new LiveScore RecordBuilder
   */
  public static models.avro.LiveScore.Builder newBuilder(models.avro.LiveScore other) {
    if (other == null) {
      return new models.avro.LiveScore.Builder();
    } else {
      return new models.avro.LiveScore.Builder(other);
    }
  }

  /**
   * RecordBuilder for LiveScore instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LiveScore>
    implements org.apache.avro.data.RecordBuilder<LiveScore> {

    private CharSequence lineEntityId;
    private CharSequence lineEntityName;
    private CharSequence gamePeriodId;
    private CharSequence gamePeriodName;
    private Integer homeTeam;
    private Integer awayTeam;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(models.avro.LiveScore.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.lineEntityId)) {
        this.lineEntityId = data().deepCopy(fields()[0].schema(), other.lineEntityId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.lineEntityName)) {
        this.lineEntityName = data().deepCopy(fields()[1].schema(), other.lineEntityName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.gamePeriodId)) {
        this.gamePeriodId = data().deepCopy(fields()[2].schema(), other.gamePeriodId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.gamePeriodName)) {
        this.gamePeriodName = data().deepCopy(fields()[3].schema(), other.gamePeriodName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.homeTeam)) {
        this.homeTeam = data().deepCopy(fields()[4].schema(), other.homeTeam);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.awayTeam)) {
        this.awayTeam = data().deepCopy(fields()[5].schema(), other.awayTeam);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing LiveScore instance
     * @param other The existing instance to copy.
     */
    private Builder(models.avro.LiveScore other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.lineEntityId)) {
        this.lineEntityId = data().deepCopy(fields()[0].schema(), other.lineEntityId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lineEntityName)) {
        this.lineEntityName = data().deepCopy(fields()[1].schema(), other.lineEntityName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.gamePeriodId)) {
        this.gamePeriodId = data().deepCopy(fields()[2].schema(), other.gamePeriodId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.gamePeriodName)) {
        this.gamePeriodName = data().deepCopy(fields()[3].schema(), other.gamePeriodName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.homeTeam)) {
        this.homeTeam = data().deepCopy(fields()[4].schema(), other.homeTeam);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.awayTeam)) {
        this.awayTeam = data().deepCopy(fields()[5].schema(), other.awayTeam);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'lineEntityId' field.
      * @return The value.
      */
    public CharSequence getLineEntityId() {
      return lineEntityId;
    }


    /**
      * Sets the value of the 'lineEntityId' field.
      * @param value The value of 'lineEntityId'.
      * @return This builder.
      */
    public models.avro.LiveScore.Builder setLineEntityId(CharSequence value) {
      validate(fields()[0], value);
      this.lineEntityId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'lineEntityId' field has been set.
      * @return True if the 'lineEntityId' field has been set, false otherwise.
      */
    public boolean hasLineEntityId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'lineEntityId' field.
      * @return This builder.
      */
    public models.avro.LiveScore.Builder clearLineEntityId() {
      lineEntityId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lineEntityName' field.
      * @return The value.
      */
    public CharSequence getLineEntityName() {
      return lineEntityName;
    }


    /**
      * Sets the value of the 'lineEntityName' field.
      * @param value The value of 'lineEntityName'.
      * @return This builder.
      */
    public models.avro.LiveScore.Builder setLineEntityName(CharSequence value) {
      validate(fields()[1], value);
      this.lineEntityName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lineEntityName' field has been set.
      * @return True if the 'lineEntityName' field has been set, false otherwise.
      */
    public boolean hasLineEntityName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lineEntityName' field.
      * @return This builder.
      */
    public models.avro.LiveScore.Builder clearLineEntityName() {
      lineEntityName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'gamePeriodId' field.
      * @return The value.
      */
    public CharSequence getGamePeriodId() {
      return gamePeriodId;
    }


    /**
      * Sets the value of the 'gamePeriodId' field.
      * @param value The value of 'gamePeriodId'.
      * @return This builder.
      */
    public models.avro.LiveScore.Builder setGamePeriodId(CharSequence value) {
      validate(fields()[2], value);
      this.gamePeriodId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'gamePeriodId' field has been set.
      * @return True if the 'gamePeriodId' field has been set, false otherwise.
      */
    public boolean hasGamePeriodId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'gamePeriodId' field.
      * @return This builder.
      */
    public models.avro.LiveScore.Builder clearGamePeriodId() {
      gamePeriodId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'gamePeriodName' field.
      * @return The value.
      */
    public CharSequence getGamePeriodName() {
      return gamePeriodName;
    }


    /**
      * Sets the value of the 'gamePeriodName' field.
      * @param value The value of 'gamePeriodName'.
      * @return This builder.
      */
    public models.avro.LiveScore.Builder setGamePeriodName(CharSequence value) {
      validate(fields()[3], value);
      this.gamePeriodName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'gamePeriodName' field has been set.
      * @return True if the 'gamePeriodName' field has been set, false otherwise.
      */
    public boolean hasGamePeriodName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'gamePeriodName' field.
      * @return This builder.
      */
    public models.avro.LiveScore.Builder clearGamePeriodName() {
      gamePeriodName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'homeTeam' field.
      * @return The value.
      */
    public Integer getHomeTeam() {
      return homeTeam;
    }


    /**
      * Sets the value of the 'homeTeam' field.
      * @param value The value of 'homeTeam'.
      * @return This builder.
      */
    public models.avro.LiveScore.Builder setHomeTeam(Integer value) {
      validate(fields()[4], value);
      this.homeTeam = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'homeTeam' field has been set.
      * @return True if the 'homeTeam' field has been set, false otherwise.
      */
    public boolean hasHomeTeam() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'homeTeam' field.
      * @return This builder.
      */
    public models.avro.LiveScore.Builder clearHomeTeam() {
      homeTeam = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'awayTeam' field.
      * @return The value.
      */
    public Integer getAwayTeam() {
      return awayTeam;
    }


    /**
      * Sets the value of the 'awayTeam' field.
      * @param value The value of 'awayTeam'.
      * @return This builder.
      */
    public models.avro.LiveScore.Builder setAwayTeam(Integer value) {
      validate(fields()[5], value);
      this.awayTeam = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'awayTeam' field has been set.
      * @return True if the 'awayTeam' field has been set, false otherwise.
      */
    public boolean hasAwayTeam() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'awayTeam' field.
      * @return This builder.
      */
    public models.avro.LiveScore.Builder clearAwayTeam() {
      awayTeam = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LiveScore build() {
      try {
        LiveScore record = new LiveScore();
        record.lineEntityId = fieldSetFlags()[0] ? this.lineEntityId : (CharSequence) defaultValue(fields()[0]);
        record.lineEntityName = fieldSetFlags()[1] ? this.lineEntityName : (CharSequence) defaultValue(fields()[1]);
        record.gamePeriodId = fieldSetFlags()[2] ? this.gamePeriodId : (CharSequence) defaultValue(fields()[2]);
        record.gamePeriodName = fieldSetFlags()[3] ? this.gamePeriodName : (CharSequence) defaultValue(fields()[3]);
        record.homeTeam = fieldSetFlags()[4] ? this.homeTeam : (Integer) defaultValue(fields()[4]);
        record.awayTeam = fieldSetFlags()[5] ? this.awayTeam : (Integer) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LiveScore>
    WRITER$ = (org.apache.avro.io.DatumWriter<LiveScore>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LiveScore>
    READER$ = (org.apache.avro.io.DatumReader<LiveScore>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.lineEntityId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.lineEntityId);
    }

    if (this.lineEntityName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.lineEntityName);
    }

    if (this.gamePeriodId == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.gamePeriodId);
    }

    if (this.gamePeriodName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.gamePeriodName);
    }

    if (this.homeTeam == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.homeTeam);
    }

    if (this.awayTeam == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.awayTeam);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.lineEntityId = null;
      } else {
        this.lineEntityId = in.readString(this.lineEntityId instanceof Utf8 ? (Utf8)this.lineEntityId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.lineEntityName = null;
      } else {
        this.lineEntityName = in.readString(this.lineEntityName instanceof Utf8 ? (Utf8)this.lineEntityName : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.gamePeriodId = null;
      } else {
        this.gamePeriodId = in.readString(this.gamePeriodId instanceof Utf8 ? (Utf8)this.gamePeriodId : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.gamePeriodName = null;
      } else {
        this.gamePeriodName = in.readString(this.gamePeriodName instanceof Utf8 ? (Utf8)this.gamePeriodName : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.homeTeam = null;
      } else {
        this.homeTeam = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.awayTeam = null;
      } else {
        this.awayTeam = in.readInt();
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lineEntityId = null;
          } else {
            this.lineEntityId = in.readString(this.lineEntityId instanceof Utf8 ? (Utf8)this.lineEntityId : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lineEntityName = null;
          } else {
            this.lineEntityName = in.readString(this.lineEntityName instanceof Utf8 ? (Utf8)this.lineEntityName : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.gamePeriodId = null;
          } else {
            this.gamePeriodId = in.readString(this.gamePeriodId instanceof Utf8 ? (Utf8)this.gamePeriodId : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.gamePeriodName = null;
          } else {
            this.gamePeriodName = in.readString(this.gamePeriodName instanceof Utf8 ? (Utf8)this.gamePeriodName : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.homeTeam = null;
          } else {
            this.homeTeam = in.readInt();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.awayTeam = null;
          } else {
            this.awayTeam = in.readInt();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










