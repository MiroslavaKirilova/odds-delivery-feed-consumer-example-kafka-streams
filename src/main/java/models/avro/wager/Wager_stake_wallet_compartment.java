/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package models.avro.wager;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class Wager_stake_wallet_compartment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6949637761381716193L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Wager_stake_wallet_compartment\",\"namespace\":\"models.avro.wager\",\"fields\":[{\"name\":\"real\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Wager_stake_wallet_compartment_real\",\"fields\":[{\"name\":\"amount\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null},{\"name\":\"virtual\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Wager_stake_wallet_compartment_virtual\",\"fields\":[{\"name\":\"amount\",\"type\":[\"null\",\"double\"],\"default\":null}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Wager_stake_wallet_compartment> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Wager_stake_wallet_compartment> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Wager_stake_wallet_compartment> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Wager_stake_wallet_compartment> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Wager_stake_wallet_compartment> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Wager_stake_wallet_compartment to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Wager_stake_wallet_compartment from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Wager_stake_wallet_compartment instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Wager_stake_wallet_compartment fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private models.avro.wager.Wager_stake_wallet_compartment_real real;
  private models.avro.wager.Wager_stake_wallet_compartment_virtual virtual;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Wager_stake_wallet_compartment() {}

  /**
   * All-args constructor.
   * @param real The new value for real
   * @param virtual The new value for virtual
   */
  public Wager_stake_wallet_compartment(models.avro.wager.Wager_stake_wallet_compartment_real real, models.avro.wager.Wager_stake_wallet_compartment_virtual virtual) {
    this.real = real;
    this.virtual = virtual;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return real;
    case 1: return virtual;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: real = (models.avro.wager.Wager_stake_wallet_compartment_real)value$; break;
    case 1: virtual = (models.avro.wager.Wager_stake_wallet_compartment_virtual)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'real' field.
   * @return The value of the 'real' field.
   */
  public models.avro.wager.Wager_stake_wallet_compartment_real getReal() {
    return real;
  }


  /**
   * Sets the value of the 'real' field.
   * @param value the value to set.
   */
  public void setReal(models.avro.wager.Wager_stake_wallet_compartment_real value) {
    this.real = value;
  }

  /**
   * Gets the value of the 'virtual' field.
   * @return The value of the 'virtual' field.
   */
  public models.avro.wager.Wager_stake_wallet_compartment_virtual getVirtual() {
    return virtual;
  }


  /**
   * Sets the value of the 'virtual' field.
   * @param value the value to set.
   */
  public void setVirtual(models.avro.wager.Wager_stake_wallet_compartment_virtual value) {
    this.virtual = value;
  }

  /**
   * Creates a new Wager_stake_wallet_compartment RecordBuilder.
   * @return A new Wager_stake_wallet_compartment RecordBuilder
   */
  public static models.avro.wager.Wager_stake_wallet_compartment.Builder newBuilder() {
    return new models.avro.wager.Wager_stake_wallet_compartment.Builder();
  }

  /**
   * Creates a new Wager_stake_wallet_compartment RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Wager_stake_wallet_compartment RecordBuilder
   */
  public static models.avro.wager.Wager_stake_wallet_compartment.Builder newBuilder(models.avro.wager.Wager_stake_wallet_compartment.Builder other) {
    if (other == null) {
      return new models.avro.wager.Wager_stake_wallet_compartment.Builder();
    } else {
      return new models.avro.wager.Wager_stake_wallet_compartment.Builder(other);
    }
  }

  /**
   * Creates a new Wager_stake_wallet_compartment RecordBuilder by copying an existing Wager_stake_wallet_compartment instance.
   * @param other The existing instance to copy.
   * @return A new Wager_stake_wallet_compartment RecordBuilder
   */
  public static models.avro.wager.Wager_stake_wallet_compartment.Builder newBuilder(models.avro.wager.Wager_stake_wallet_compartment other) {
    if (other == null) {
      return new models.avro.wager.Wager_stake_wallet_compartment.Builder();
    } else {
      return new models.avro.wager.Wager_stake_wallet_compartment.Builder(other);
    }
  }

  /**
   * RecordBuilder for Wager_stake_wallet_compartment instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Wager_stake_wallet_compartment>
    implements org.apache.avro.data.RecordBuilder<Wager_stake_wallet_compartment> {

    private models.avro.wager.Wager_stake_wallet_compartment_real real;
    private models.avro.wager.Wager_stake_wallet_compartment_real.Builder realBuilder;
    private models.avro.wager.Wager_stake_wallet_compartment_virtual virtual;
    private models.avro.wager.Wager_stake_wallet_compartment_virtual.Builder virtualBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(models.avro.wager.Wager_stake_wallet_compartment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.real)) {
        this.real = data().deepCopy(fields()[0].schema(), other.real);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasRealBuilder()) {
        this.realBuilder = models.avro.wager.Wager_stake_wallet_compartment_real.newBuilder(other.getRealBuilder());
      }
      if (isValidValue(fields()[1], other.virtual)) {
        this.virtual = data().deepCopy(fields()[1].schema(), other.virtual);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasVirtualBuilder()) {
        this.virtualBuilder = models.avro.wager.Wager_stake_wallet_compartment_virtual.newBuilder(other.getVirtualBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Wager_stake_wallet_compartment instance
     * @param other The existing instance to copy.
     */
    private Builder(models.avro.wager.Wager_stake_wallet_compartment other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.real)) {
        this.real = data().deepCopy(fields()[0].schema(), other.real);
        fieldSetFlags()[0] = true;
      }
      this.realBuilder = null;
      if (isValidValue(fields()[1], other.virtual)) {
        this.virtual = data().deepCopy(fields()[1].schema(), other.virtual);
        fieldSetFlags()[1] = true;
      }
      this.virtualBuilder = null;
    }

    /**
      * Gets the value of the 'real' field.
      * @return The value.
      */
    public models.avro.wager.Wager_stake_wallet_compartment_real getReal() {
      return real;
    }


    /**
      * Sets the value of the 'real' field.
      * @param value The value of 'real'.
      * @return This builder.
      */
    public models.avro.wager.Wager_stake_wallet_compartment.Builder setReal(models.avro.wager.Wager_stake_wallet_compartment_real value) {
      validate(fields()[0], value);
      this.realBuilder = null;
      this.real = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'real' field has been set.
      * @return True if the 'real' field has been set, false otherwise.
      */
    public boolean hasReal() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'real' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public models.avro.wager.Wager_stake_wallet_compartment_real.Builder getRealBuilder() {
      if (realBuilder == null) {
        if (hasReal()) {
          setRealBuilder(models.avro.wager.Wager_stake_wallet_compartment_real.newBuilder(real));
        } else {
          setRealBuilder(models.avro.wager.Wager_stake_wallet_compartment_real.newBuilder());
        }
      }
      return realBuilder;
    }

    /**
     * Sets the Builder instance for the 'real' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public models.avro.wager.Wager_stake_wallet_compartment.Builder setRealBuilder(models.avro.wager.Wager_stake_wallet_compartment_real.Builder value) {
      clearReal();
      realBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'real' field has an active Builder instance
     * @return True if the 'real' field has an active Builder instance
     */
    public boolean hasRealBuilder() {
      return realBuilder != null;
    }

    /**
      * Clears the value of the 'real' field.
      * @return This builder.
      */
    public models.avro.wager.Wager_stake_wallet_compartment.Builder clearReal() {
      real = null;
      realBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'virtual' field.
      * @return The value.
      */
    public models.avro.wager.Wager_stake_wallet_compartment_virtual getVirtual() {
      return virtual;
    }


    /**
      * Sets the value of the 'virtual' field.
      * @param value The value of 'virtual'.
      * @return This builder.
      */
    public models.avro.wager.Wager_stake_wallet_compartment.Builder setVirtual(models.avro.wager.Wager_stake_wallet_compartment_virtual value) {
      validate(fields()[1], value);
      this.virtualBuilder = null;
      this.virtual = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'virtual' field has been set.
      * @return True if the 'virtual' field has been set, false otherwise.
      */
    public boolean hasVirtual() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'virtual' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public models.avro.wager.Wager_stake_wallet_compartment_virtual.Builder getVirtualBuilder() {
      if (virtualBuilder == null) {
        if (hasVirtual()) {
          setVirtualBuilder(models.avro.wager.Wager_stake_wallet_compartment_virtual.newBuilder(virtual));
        } else {
          setVirtualBuilder(models.avro.wager.Wager_stake_wallet_compartment_virtual.newBuilder());
        }
      }
      return virtualBuilder;
    }

    /**
     * Sets the Builder instance for the 'virtual' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public models.avro.wager.Wager_stake_wallet_compartment.Builder setVirtualBuilder(models.avro.wager.Wager_stake_wallet_compartment_virtual.Builder value) {
      clearVirtual();
      virtualBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'virtual' field has an active Builder instance
     * @return True if the 'virtual' field has an active Builder instance
     */
    public boolean hasVirtualBuilder() {
      return virtualBuilder != null;
    }

    /**
      * Clears the value of the 'virtual' field.
      * @return This builder.
      */
    public models.avro.wager.Wager_stake_wallet_compartment.Builder clearVirtual() {
      virtual = null;
      virtualBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Wager_stake_wallet_compartment build() {
      try {
        Wager_stake_wallet_compartment record = new Wager_stake_wallet_compartment();
        if (realBuilder != null) {
          try {
            record.real = this.realBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("real"));
            throw e;
          }
        } else {
          record.real = fieldSetFlags()[0] ? this.real : (models.avro.wager.Wager_stake_wallet_compartment_real) defaultValue(fields()[0]);
        }
        if (virtualBuilder != null) {
          try {
            record.virtual = this.virtualBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("virtual"));
            throw e;
          }
        } else {
          record.virtual = fieldSetFlags()[1] ? this.virtual : (models.avro.wager.Wager_stake_wallet_compartment_virtual) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Wager_stake_wallet_compartment>
    WRITER$ = (org.apache.avro.io.DatumWriter<Wager_stake_wallet_compartment>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Wager_stake_wallet_compartment>
    READER$ = (org.apache.avro.io.DatumReader<Wager_stake_wallet_compartment>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.real == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.real.customEncode(out);
    }

    if (this.virtual == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.virtual.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.real = null;
      } else {
        if (this.real == null) {
          this.real = new models.avro.wager.Wager_stake_wallet_compartment_real();
        }
        this.real.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.virtual = null;
      } else {
        if (this.virtual == null) {
          this.virtual = new models.avro.wager.Wager_stake_wallet_compartment_virtual();
        }
        this.virtual.customDecode(in);
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.real = null;
          } else {
            if (this.real == null) {
              this.real = new models.avro.wager.Wager_stake_wallet_compartment_real();
            }
            this.real.customDecode(in);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.virtual = null;
          } else {
            if (this.virtual == null) {
              this.virtual = new models.avro.wager.Wager_stake_wallet_compartment_virtual();
            }
            this.virtual.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










