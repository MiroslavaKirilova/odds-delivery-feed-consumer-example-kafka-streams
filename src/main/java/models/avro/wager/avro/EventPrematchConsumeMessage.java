/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package models.avro.wager.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class EventPrematchConsumeMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -871477340189898735L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EventPrematchConsumeMessage\",\"namespace\":\"models.avro\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"state\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"liveGamePeriod\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"liveMinute\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"marketCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"startDate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"timeRange\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"country\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Country\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"title\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"sport\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Sport\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"title\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"key\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"league\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"League\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"title\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"format\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"awayTeam\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Team\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"color\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"homeTeam\",\"type\":[\"null\",\"Team\"],\"default\":null},{\"name\":\"liveScores\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"LiveScore\",\"fields\":[{\"name\":\"lineEntityId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lineEntityName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"gamePeriodId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"gamePeriodName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"homeTeam\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"awayTeam\",\"type\":[\"null\",\"int\"],\"default\":null}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EventPrematchConsumeMessage> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EventPrematchConsumeMessage> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EventPrematchConsumeMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EventPrematchConsumeMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EventPrematchConsumeMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EventPrematchConsumeMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EventPrematchConsumeMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EventPrematchConsumeMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EventPrematchConsumeMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private CharSequence id;
  private CharSequence state;
  private CharSequence status;
  private CharSequence liveGamePeriod;
  private Integer liveMinute;
  private Integer marketCount;
  private CharSequence startDate;
  private CharSequence timeRange;
  private Country country;
  private Sport sport;
  private League league;
  private Team awayTeam;
  private Team homeTeam;
  private java.util.List<LiveScore> liveScores;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EventPrematchConsumeMessage() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param state The new value for state
   * @param status The new value for status
   * @param liveGamePeriod The new value for liveGamePeriod
   * @param liveMinute The new value for liveMinute
   * @param marketCount The new value for marketCount
   * @param startDate The new value for startDate
   * @param timeRange The new value for timeRange
   * @param country The new value for country
   * @param sport The new value for sport
   * @param league The new value for league
   * @param awayTeam The new value for awayTeam
   * @param homeTeam The new value for homeTeam
   * @param liveScores The new value for liveScores
   */
  public EventPrematchConsumeMessage(CharSequence id, CharSequence state, CharSequence status, CharSequence liveGamePeriod, Integer liveMinute, Integer marketCount, CharSequence startDate, CharSequence timeRange, Country country, Sport sport, League league, Team awayTeam, Team homeTeam, java.util.List<LiveScore> liveScores) {
    this.id = id;
    this.state = state;
    this.status = status;
    this.liveGamePeriod = liveGamePeriod;
    this.liveMinute = liveMinute;
    this.marketCount = marketCount;
    this.startDate = startDate;
    this.timeRange = timeRange;
    this.country = country;
    this.sport = sport;
    this.league = league;
    this.awayTeam = awayTeam;
    this.homeTeam = homeTeam;
    this.liveScores = liveScores;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return state;
    case 2: return status;
    case 3: return liveGamePeriod;
    case 4: return liveMinute;
    case 5: return marketCount;
    case 6: return startDate;
    case 7: return timeRange;
    case 8: return country;
    case 9: return sport;
    case 10: return league;
    case 11: return awayTeam;
    case 12: return homeTeam;
    case 13: return liveScores;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (CharSequence)value$; break;
    case 1: state = (CharSequence)value$; break;
    case 2: status = (CharSequence)value$; break;
    case 3: liveGamePeriod = (CharSequence)value$; break;
    case 4: liveMinute = (Integer)value$; break;
    case 5: marketCount = (Integer)value$; break;
    case 6: startDate = (CharSequence)value$; break;
    case 7: timeRange = (CharSequence)value$; break;
    case 8: country = (Country)value$; break;
    case 9: sport = (Sport)value$; break;
    case 10: league = (League)value$; break;
    case 11: awayTeam = (Team)value$; break;
    case 12: homeTeam = (Team)value$; break;
    case 13: liveScores = (java.util.List<LiveScore>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public CharSequence getState() {
    return state;
  }


  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(CharSequence value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'liveGamePeriod' field.
   * @return The value of the 'liveGamePeriod' field.
   */
  public CharSequence getLiveGamePeriod() {
    return liveGamePeriod;
  }


  /**
   * Sets the value of the 'liveGamePeriod' field.
   * @param value the value to set.
   */
  public void setLiveGamePeriod(CharSequence value) {
    this.liveGamePeriod = value;
  }

  /**
   * Gets the value of the 'liveMinute' field.
   * @return The value of the 'liveMinute' field.
   */
  public Integer getLiveMinute() {
    return liveMinute;
  }


  /**
   * Sets the value of the 'liveMinute' field.
   * @param value the value to set.
   */
  public void setLiveMinute(Integer value) {
    this.liveMinute = value;
  }

  /**
   * Gets the value of the 'marketCount' field.
   * @return The value of the 'marketCount' field.
   */
  public Integer getMarketCount() {
    return marketCount;
  }


  /**
   * Sets the value of the 'marketCount' field.
   * @param value the value to set.
   */
  public void setMarketCount(Integer value) {
    this.marketCount = value;
  }

  /**
   * Gets the value of the 'startDate' field.
   * @return The value of the 'startDate' field.
   */
  public CharSequence getStartDate() {
    return startDate;
  }


  /**
   * Sets the value of the 'startDate' field.
   * @param value the value to set.
   */
  public void setStartDate(CharSequence value) {
    this.startDate = value;
  }

  /**
   * Gets the value of the 'timeRange' field.
   * @return The value of the 'timeRange' field.
   */
  public CharSequence getTimeRange() {
    return timeRange;
  }


  /**
   * Sets the value of the 'timeRange' field.
   * @param value the value to set.
   */
  public void setTimeRange(CharSequence value) {
    this.timeRange = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public Country getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(Country value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'sport' field.
   * @return The value of the 'sport' field.
   */
  public Sport getSport() {
    return sport;
  }


  /**
   * Sets the value of the 'sport' field.
   * @param value the value to set.
   */
  public void setSport(Sport value) {
    this.sport = value;
  }

  /**
   * Gets the value of the 'league' field.
   * @return The value of the 'league' field.
   */
  public League getLeague() {
    return league;
  }


  /**
   * Sets the value of the 'league' field.
   * @param value the value to set.
   */
  public void setLeague(League value) {
    this.league = value;
  }

  /**
   * Gets the value of the 'awayTeam' field.
   * @return The value of the 'awayTeam' field.
   */
  public Team getAwayTeam() {
    return awayTeam;
  }


  /**
   * Sets the value of the 'awayTeam' field.
   * @param value the value to set.
   */
  public void setAwayTeam(Team value) {
    this.awayTeam = value;
  }

  /**
   * Gets the value of the 'homeTeam' field.
   * @return The value of the 'homeTeam' field.
   */
  public Team getHomeTeam() {
    return homeTeam;
  }


  /**
   * Sets the value of the 'homeTeam' field.
   * @param value the value to set.
   */
  public void setHomeTeam(Team value) {
    this.homeTeam = value;
  }

  /**
   * Gets the value of the 'liveScores' field.
   * @return The value of the 'liveScores' field.
   */
  public java.util.List<LiveScore> getLiveScores() {
    return liveScores;
  }


  /**
   * Sets the value of the 'liveScores' field.
   * @param value the value to set.
   */
  public void setLiveScores(java.util.List<LiveScore> value) {
    this.liveScores = value;
  }

  /**
   * Creates a new EventPrematchConsumeMessage RecordBuilder.
   * @return A new EventPrematchConsumeMessage RecordBuilder
   */
  public static EventPrematchConsumeMessage.Builder newBuilder() {
    return new EventPrematchConsumeMessage.Builder();
  }

  /**
   * Creates a new EventPrematchConsumeMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EventPrematchConsumeMessage RecordBuilder
   */
  public static EventPrematchConsumeMessage.Builder newBuilder(EventPrematchConsumeMessage.Builder other) {
    if (other == null) {
      return new EventPrematchConsumeMessage.Builder();
    } else {
      return new EventPrematchConsumeMessage.Builder(other);
    }
  }

  /**
   * Creates a new EventPrematchConsumeMessage RecordBuilder by copying an existing EventPrematchConsumeMessage instance.
   * @param other The existing instance to copy.
   * @return A new EventPrematchConsumeMessage RecordBuilder
   */
  public static EventPrematchConsumeMessage.Builder newBuilder(EventPrematchConsumeMessage other) {
    if (other == null) {
      return new EventPrematchConsumeMessage.Builder();
    } else {
      return new EventPrematchConsumeMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for EventPrematchConsumeMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EventPrematchConsumeMessage>
    implements org.apache.avro.data.RecordBuilder<EventPrematchConsumeMessage> {

    private CharSequence id;
    private CharSequence state;
    private CharSequence status;
    private CharSequence liveGamePeriod;
    private Integer liveMinute;
    private Integer marketCount;
    private CharSequence startDate;
    private CharSequence timeRange;
    private Country country;
    private Country.Builder countryBuilder;
    private Sport sport;
    private Sport.Builder sportBuilder;
    private League league;
    private League.Builder leagueBuilder;
    private Team awayTeam;
    private Team.Builder awayTeamBuilder;
    private Team homeTeam;
    private Team.Builder homeTeamBuilder;
    private java.util.List<LiveScore> liveScores;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(EventPrematchConsumeMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.state)) {
        this.state = data().deepCopy(fields()[1].schema(), other.state);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.liveGamePeriod)) {
        this.liveGamePeriod = data().deepCopy(fields()[3].schema(), other.liveGamePeriod);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.liveMinute)) {
        this.liveMinute = data().deepCopy(fields()[4].schema(), other.liveMinute);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.marketCount)) {
        this.marketCount = data().deepCopy(fields()[5].schema(), other.marketCount);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.startDate)) {
        this.startDate = data().deepCopy(fields()[6].schema(), other.startDate);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.timeRange)) {
        this.timeRange = data().deepCopy(fields()[7].schema(), other.timeRange);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.country)) {
        this.country = data().deepCopy(fields()[8].schema(), other.country);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (other.hasCountryBuilder()) {
        this.countryBuilder = Country.newBuilder(other.getCountryBuilder());
      }
      if (isValidValue(fields()[9], other.sport)) {
        this.sport = data().deepCopy(fields()[9].schema(), other.sport);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (other.hasSportBuilder()) {
        this.sportBuilder = Sport.newBuilder(other.getSportBuilder());
      }
      if (isValidValue(fields()[10], other.league)) {
        this.league = data().deepCopy(fields()[10].schema(), other.league);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (other.hasLeagueBuilder()) {
        this.leagueBuilder = League.newBuilder(other.getLeagueBuilder());
      }
      if (isValidValue(fields()[11], other.awayTeam)) {
        this.awayTeam = data().deepCopy(fields()[11].schema(), other.awayTeam);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (other.hasAwayTeamBuilder()) {
        this.awayTeamBuilder = Team.newBuilder(other.getAwayTeamBuilder());
      }
      if (isValidValue(fields()[12], other.homeTeam)) {
        this.homeTeam = data().deepCopy(fields()[12].schema(), other.homeTeam);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (other.hasHomeTeamBuilder()) {
        this.homeTeamBuilder = Team.newBuilder(other.getHomeTeamBuilder());
      }
      if (isValidValue(fields()[13], other.liveScores)) {
        this.liveScores = data().deepCopy(fields()[13].schema(), other.liveScores);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
    }

    /**
     * Creates a Builder by copying an existing EventPrematchConsumeMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(EventPrematchConsumeMessage other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.state)) {
        this.state = data().deepCopy(fields()[1].schema(), other.state);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.liveGamePeriod)) {
        this.liveGamePeriod = data().deepCopy(fields()[3].schema(), other.liveGamePeriod);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.liveMinute)) {
        this.liveMinute = data().deepCopy(fields()[4].schema(), other.liveMinute);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.marketCount)) {
        this.marketCount = data().deepCopy(fields()[5].schema(), other.marketCount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.startDate)) {
        this.startDate = data().deepCopy(fields()[6].schema(), other.startDate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.timeRange)) {
        this.timeRange = data().deepCopy(fields()[7].schema(), other.timeRange);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.country)) {
        this.country = data().deepCopy(fields()[8].schema(), other.country);
        fieldSetFlags()[8] = true;
      }
      this.countryBuilder = null;
      if (isValidValue(fields()[9], other.sport)) {
        this.sport = data().deepCopy(fields()[9].schema(), other.sport);
        fieldSetFlags()[9] = true;
      }
      this.sportBuilder = null;
      if (isValidValue(fields()[10], other.league)) {
        this.league = data().deepCopy(fields()[10].schema(), other.league);
        fieldSetFlags()[10] = true;
      }
      this.leagueBuilder = null;
      if (isValidValue(fields()[11], other.awayTeam)) {
        this.awayTeam = data().deepCopy(fields()[11].schema(), other.awayTeam);
        fieldSetFlags()[11] = true;
      }
      this.awayTeamBuilder = null;
      if (isValidValue(fields()[12], other.homeTeam)) {
        this.homeTeam = data().deepCopy(fields()[12].schema(), other.homeTeam);
        fieldSetFlags()[12] = true;
      }
      this.homeTeamBuilder = null;
      if (isValidValue(fields()[13], other.liveScores)) {
        this.liveScores = data().deepCopy(fields()[13].schema(), other.liveScores);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder setId(CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public CharSequence getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder setState(CharSequence value) {
      validate(fields()[1], value);
      this.state = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder clearState() {
      state = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder setStatus(CharSequence value) {
      validate(fields()[2], value);
      this.status = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder clearStatus() {
      status = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'liveGamePeriod' field.
      * @return The value.
      */
    public CharSequence getLiveGamePeriod() {
      return liveGamePeriod;
    }


    /**
      * Sets the value of the 'liveGamePeriod' field.
      * @param value The value of 'liveGamePeriod'.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder setLiveGamePeriod(CharSequence value) {
      validate(fields()[3], value);
      this.liveGamePeriod = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'liveGamePeriod' field has been set.
      * @return True if the 'liveGamePeriod' field has been set, false otherwise.
      */
    public boolean hasLiveGamePeriod() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'liveGamePeriod' field.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder clearLiveGamePeriod() {
      liveGamePeriod = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'liveMinute' field.
      * @return The value.
      */
    public Integer getLiveMinute() {
      return liveMinute;
    }


    /**
      * Sets the value of the 'liveMinute' field.
      * @param value The value of 'liveMinute'.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder setLiveMinute(Integer value) {
      validate(fields()[4], value);
      this.liveMinute = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'liveMinute' field has been set.
      * @return True if the 'liveMinute' field has been set, false otherwise.
      */
    public boolean hasLiveMinute() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'liveMinute' field.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder clearLiveMinute() {
      liveMinute = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'marketCount' field.
      * @return The value.
      */
    public Integer getMarketCount() {
      return marketCount;
    }


    /**
      * Sets the value of the 'marketCount' field.
      * @param value The value of 'marketCount'.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder setMarketCount(Integer value) {
      validate(fields()[5], value);
      this.marketCount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'marketCount' field has been set.
      * @return True if the 'marketCount' field has been set, false otherwise.
      */
    public boolean hasMarketCount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'marketCount' field.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder clearMarketCount() {
      marketCount = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'startDate' field.
      * @return The value.
      */
    public CharSequence getStartDate() {
      return startDate;
    }


    /**
      * Sets the value of the 'startDate' field.
      * @param value The value of 'startDate'.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder setStartDate(CharSequence value) {
      validate(fields()[6], value);
      this.startDate = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'startDate' field has been set.
      * @return True if the 'startDate' field has been set, false otherwise.
      */
    public boolean hasStartDate() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'startDate' field.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder clearStartDate() {
      startDate = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeRange' field.
      * @return The value.
      */
    public CharSequence getTimeRange() {
      return timeRange;
    }


    /**
      * Sets the value of the 'timeRange' field.
      * @param value The value of 'timeRange'.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder setTimeRange(CharSequence value) {
      validate(fields()[7], value);
      this.timeRange = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'timeRange' field has been set.
      * @return True if the 'timeRange' field has been set, false otherwise.
      */
    public boolean hasTimeRange() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'timeRange' field.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder clearTimeRange() {
      timeRange = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public Country getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder setCountry(Country value) {
      validate(fields()[8], value);
      this.countryBuilder = null;
      this.country = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'country' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Country.Builder getCountryBuilder() {
      if (countryBuilder == null) {
        if (hasCountry()) {
          setCountryBuilder(Country.newBuilder(country));
        } else {
          setCountryBuilder(Country.newBuilder());
        }
      }
      return countryBuilder;
    }

    /**
     * Sets the Builder instance for the 'country' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public EventPrematchConsumeMessage.Builder setCountryBuilder(Country.Builder value) {
      clearCountry();
      countryBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'country' field has an active Builder instance
     * @return True if the 'country' field has an active Builder instance
     */
    public boolean hasCountryBuilder() {
      return countryBuilder != null;
    }

    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder clearCountry() {
      country = null;
      countryBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'sport' field.
      * @return The value.
      */
    public Sport getSport() {
      return sport;
    }


    /**
      * Sets the value of the 'sport' field.
      * @param value The value of 'sport'.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder setSport(Sport value) {
      validate(fields()[9], value);
      this.sportBuilder = null;
      this.sport = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'sport' field has been set.
      * @return True if the 'sport' field has been set, false otherwise.
      */
    public boolean hasSport() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'sport' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Sport.Builder getSportBuilder() {
      if (sportBuilder == null) {
        if (hasSport()) {
          setSportBuilder(Sport.newBuilder(sport));
        } else {
          setSportBuilder(Sport.newBuilder());
        }
      }
      return sportBuilder;
    }

    /**
     * Sets the Builder instance for the 'sport' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public EventPrematchConsumeMessage.Builder setSportBuilder(Sport.Builder value) {
      clearSport();
      sportBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'sport' field has an active Builder instance
     * @return True if the 'sport' field has an active Builder instance
     */
    public boolean hasSportBuilder() {
      return sportBuilder != null;
    }

    /**
      * Clears the value of the 'sport' field.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder clearSport() {
      sport = null;
      sportBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'league' field.
      * @return The value.
      */
    public League getLeague() {
      return league;
    }


    /**
      * Sets the value of the 'league' field.
      * @param value The value of 'league'.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder setLeague(League value) {
      validate(fields()[10], value);
      this.leagueBuilder = null;
      this.league = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'league' field has been set.
      * @return True if the 'league' field has been set, false otherwise.
      */
    public boolean hasLeague() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'league' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public League.Builder getLeagueBuilder() {
      if (leagueBuilder == null) {
        if (hasLeague()) {
          setLeagueBuilder(League.newBuilder(league));
        } else {
          setLeagueBuilder(League.newBuilder());
        }
      }
      return leagueBuilder;
    }

    /**
     * Sets the Builder instance for the 'league' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public EventPrematchConsumeMessage.Builder setLeagueBuilder(League.Builder value) {
      clearLeague();
      leagueBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'league' field has an active Builder instance
     * @return True if the 'league' field has an active Builder instance
     */
    public boolean hasLeagueBuilder() {
      return leagueBuilder != null;
    }

    /**
      * Clears the value of the 'league' field.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder clearLeague() {
      league = null;
      leagueBuilder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'awayTeam' field.
      * @return The value.
      */
    public Team getAwayTeam() {
      return awayTeam;
    }


    /**
      * Sets the value of the 'awayTeam' field.
      * @param value The value of 'awayTeam'.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder setAwayTeam(Team value) {
      validate(fields()[11], value);
      this.awayTeamBuilder = null;
      this.awayTeam = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'awayTeam' field has been set.
      * @return True if the 'awayTeam' field has been set, false otherwise.
      */
    public boolean hasAwayTeam() {
      return fieldSetFlags()[11];
    }

    /**
     * Gets the Builder instance for the 'awayTeam' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Team.Builder getAwayTeamBuilder() {
      if (awayTeamBuilder == null) {
        if (hasAwayTeam()) {
          setAwayTeamBuilder(Team.newBuilder(awayTeam));
        } else {
          setAwayTeamBuilder(Team.newBuilder());
        }
      }
      return awayTeamBuilder;
    }

    /**
     * Sets the Builder instance for the 'awayTeam' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public EventPrematchConsumeMessage.Builder setAwayTeamBuilder(Team.Builder value) {
      clearAwayTeam();
      awayTeamBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'awayTeam' field has an active Builder instance
     * @return True if the 'awayTeam' field has an active Builder instance
     */
    public boolean hasAwayTeamBuilder() {
      return awayTeamBuilder != null;
    }

    /**
      * Clears the value of the 'awayTeam' field.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder clearAwayTeam() {
      awayTeam = null;
      awayTeamBuilder = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'homeTeam' field.
      * @return The value.
      */
    public Team getHomeTeam() {
      return homeTeam;
    }


    /**
      * Sets the value of the 'homeTeam' field.
      * @param value The value of 'homeTeam'.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder setHomeTeam(Team value) {
      validate(fields()[12], value);
      this.homeTeamBuilder = null;
      this.homeTeam = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'homeTeam' field has been set.
      * @return True if the 'homeTeam' field has been set, false otherwise.
      */
    public boolean hasHomeTeam() {
      return fieldSetFlags()[12];
    }

    /**
     * Gets the Builder instance for the 'homeTeam' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Team.Builder getHomeTeamBuilder() {
      if (homeTeamBuilder == null) {
        if (hasHomeTeam()) {
          setHomeTeamBuilder(Team.newBuilder(homeTeam));
        } else {
          setHomeTeamBuilder(Team.newBuilder());
        }
      }
      return homeTeamBuilder;
    }

    /**
     * Sets the Builder instance for the 'homeTeam' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public EventPrematchConsumeMessage.Builder setHomeTeamBuilder(Team.Builder value) {
      clearHomeTeam();
      homeTeamBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'homeTeam' field has an active Builder instance
     * @return True if the 'homeTeam' field has an active Builder instance
     */
    public boolean hasHomeTeamBuilder() {
      return homeTeamBuilder != null;
    }

    /**
      * Clears the value of the 'homeTeam' field.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder clearHomeTeam() {
      homeTeam = null;
      homeTeamBuilder = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'liveScores' field.
      * @return The value.
      */
    public java.util.List<LiveScore> getLiveScores() {
      return liveScores;
    }


    /**
      * Sets the value of the 'liveScores' field.
      * @param value The value of 'liveScores'.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder setLiveScores(java.util.List<LiveScore> value) {
      validate(fields()[13], value);
      this.liveScores = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'liveScores' field has been set.
      * @return True if the 'liveScores' field has been set, false otherwise.
      */
    public boolean hasLiveScores() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'liveScores' field.
      * @return This builder.
      */
    public EventPrematchConsumeMessage.Builder clearLiveScores() {
      liveScores = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EventPrematchConsumeMessage build() {
      try {
        EventPrematchConsumeMessage record = new EventPrematchConsumeMessage();
        record.id = fieldSetFlags()[0] ? this.id : (CharSequence) defaultValue(fields()[0]);
        record.state = fieldSetFlags()[1] ? this.state : (CharSequence) defaultValue(fields()[1]);
        record.status = fieldSetFlags()[2] ? this.status : (CharSequence) defaultValue(fields()[2]);
        record.liveGamePeriod = fieldSetFlags()[3] ? this.liveGamePeriod : (CharSequence) defaultValue(fields()[3]);
        record.liveMinute = fieldSetFlags()[4] ? this.liveMinute : (Integer) defaultValue(fields()[4]);
        record.marketCount = fieldSetFlags()[5] ? this.marketCount : (Integer) defaultValue(fields()[5]);
        record.startDate = fieldSetFlags()[6] ? this.startDate : (CharSequence) defaultValue(fields()[6]);
        record.timeRange = fieldSetFlags()[7] ? this.timeRange : (CharSequence) defaultValue(fields()[7]);
        if (countryBuilder != null) {
          try {
            record.country = this.countryBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("country"));
            throw e;
          }
        } else {
          record.country = fieldSetFlags()[8] ? this.country : (Country) defaultValue(fields()[8]);
        }
        if (sportBuilder != null) {
          try {
            record.sport = this.sportBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("sport"));
            throw e;
          }
        } else {
          record.sport = fieldSetFlags()[9] ? this.sport : (Sport) defaultValue(fields()[9]);
        }
        if (leagueBuilder != null) {
          try {
            record.league = this.leagueBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("league"));
            throw e;
          }
        } else {
          record.league = fieldSetFlags()[10] ? this.league : (League) defaultValue(fields()[10]);
        }
        if (awayTeamBuilder != null) {
          try {
            record.awayTeam = this.awayTeamBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("awayTeam"));
            throw e;
          }
        } else {
          record.awayTeam = fieldSetFlags()[11] ? this.awayTeam : (Team) defaultValue(fields()[11]);
        }
        if (homeTeamBuilder != null) {
          try {
            record.homeTeam = this.homeTeamBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("homeTeam"));
            throw e;
          }
        } else {
          record.homeTeam = fieldSetFlags()[12] ? this.homeTeam : (Team) defaultValue(fields()[12]);
        }
        record.liveScores = fieldSetFlags()[13] ? this.liveScores : (java.util.List<LiveScore>) defaultValue(fields()[13]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EventPrematchConsumeMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<EventPrematchConsumeMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EventPrematchConsumeMessage>
    READER$ = (org.apache.avro.io.DatumReader<EventPrematchConsumeMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id);
    }

    if (this.state == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.state);
    }

    if (this.status == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.status);
    }

    if (this.liveGamePeriod == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.liveGamePeriod);
    }

    if (this.liveMinute == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.liveMinute);
    }

    if (this.marketCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.marketCount);
    }

    if (this.startDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.startDate);
    }

    if (this.timeRange == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.timeRange);
    }

    if (this.country == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.country.customEncode(out);
    }

    if (this.sport == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.sport.customEncode(out);
    }

    if (this.league == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.league.customEncode(out);
    }

    if (this.awayTeam == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.awayTeam.customEncode(out);
    }

    if (this.homeTeam == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.homeTeam.customEncode(out);
    }

    if (this.liveScores == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.liveScores.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (LiveScore e0: this.liveScores) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.state = null;
      } else {
        this.state = in.readString(this.state instanceof Utf8 ? (Utf8)this.state : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.status = null;
      } else {
        this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.liveGamePeriod = null;
      } else {
        this.liveGamePeriod = in.readString(this.liveGamePeriod instanceof Utf8 ? (Utf8)this.liveGamePeriod : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.liveMinute = null;
      } else {
        this.liveMinute = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.marketCount = null;
      } else {
        this.marketCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.startDate = null;
      } else {
        this.startDate = in.readString(this.startDate instanceof Utf8 ? (Utf8)this.startDate : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.timeRange = null;
      } else {
        this.timeRange = in.readString(this.timeRange instanceof Utf8 ? (Utf8)this.timeRange : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.country = null;
      } else {
        if (this.country == null) {
          this.country = new Country();
        }
        this.country.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sport = null;
      } else {
        if (this.sport == null) {
          this.sport = new Sport();
        }
        this.sport.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.league = null;
      } else {
        if (this.league == null) {
          this.league = new League();
        }
        this.league.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.awayTeam = null;
      } else {
        if (this.awayTeam == null) {
          this.awayTeam = new Team();
        }
        this.awayTeam.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.homeTeam = null;
      } else {
        if (this.homeTeam == null) {
          this.homeTeam = new Team();
        }
        this.homeTeam.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.liveScores = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<LiveScore> a0 = this.liveScores;
        if (a0 == null) {
          a0 = new SpecificData.Array<LiveScore>((int)size0, SCHEMA$.getField("liveScores").schema().getTypes().get(1));
          this.liveScores = a0;
        } else a0.clear();
        SpecificData.Array<LiveScore> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<LiveScore>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            LiveScore e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new LiveScore();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

    } else {
      for (int i = 0; i < 14; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.state = null;
          } else {
            this.state = in.readString(this.state instanceof Utf8 ? (Utf8)this.state : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.status = null;
          } else {
            this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.liveGamePeriod = null;
          } else {
            this.liveGamePeriod = in.readString(this.liveGamePeriod instanceof Utf8 ? (Utf8)this.liveGamePeriod : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.liveMinute = null;
          } else {
            this.liveMinute = in.readInt();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.marketCount = null;
          } else {
            this.marketCount = in.readInt();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.startDate = null;
          } else {
            this.startDate = in.readString(this.startDate instanceof Utf8 ? (Utf8)this.startDate : null);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.timeRange = null;
          } else {
            this.timeRange = in.readString(this.timeRange instanceof Utf8 ? (Utf8)this.timeRange : null);
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.country = null;
          } else {
            if (this.country == null) {
              this.country = new Country();
            }
            this.country.customDecode(in);
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sport = null;
          } else {
            if (this.sport == null) {
              this.sport = new Sport();
            }
            this.sport.customDecode(in);
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.league = null;
          } else {
            if (this.league == null) {
              this.league = new League();
            }
            this.league.customDecode(in);
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.awayTeam = null;
          } else {
            if (this.awayTeam == null) {
              this.awayTeam = new Team();
            }
            this.awayTeam.customDecode(in);
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.homeTeam = null;
          } else {
            if (this.homeTeam == null) {
              this.homeTeam = new Team();
            }
            this.homeTeam.customDecode(in);
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.liveScores = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<LiveScore> a0 = this.liveScores;
            if (a0 == null) {
              a0 = new SpecificData.Array<LiveScore>((int)size0, SCHEMA$.getField("liveScores").schema().getTypes().get(1));
              this.liveScores = a0;
            } else a0.clear();
            SpecificData.Array<LiveScore> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<LiveScore>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                LiveScore e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new LiveScore();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










