/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package models.avro.wager.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class EventOddsHistoryMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7676268928793331022L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EventOddsHistoryMessage\",\"namespace\":\"models.avro\",\"fields\":[{\"name\":\"origin\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Origin\",\"fields\":[{\"name\":\"stream\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"environment\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"eventInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"EventInfo\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"state\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"liveGamePeriod\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LiveGamePeriod\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"liveMinute\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"marketsCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"startDate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"timeRange\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"sport\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Sport\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"title\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"key\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"country\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Country\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"title\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"league\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"League\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"title\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"format\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"teams\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Teams\",\"fields\":[{\"name\":\"home\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Team\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"color\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"away\",\"type\":[\"null\",\"Team\"],\"default\":null}]}],\"default\":null}]}],\"default\":null},{\"name\":\"liveScores\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LiveScores\",\"fields\":[{\"name\":\"lineEntity\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LineEntity\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"gamePeriod\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"GamePeriod\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"home\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"away\",\"type\":[\"null\",\"int\"],\"default\":null}]}],\"default\":null},{\"name\":\"typedScores\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"Score\",\"fields\":[{\"name\":\"homeTeam\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"awayTeam\",\"type\":[\"null\",\"int\"],\"default\":null}]},\"keys\":\"string\"}],\"default\":null},{\"name\":\"timestamp\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"gcsPartitioner\",\"type\":[\"null\",\"LiveScores\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EventOddsHistoryMessage> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EventOddsHistoryMessage> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EventOddsHistoryMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EventOddsHistoryMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EventOddsHistoryMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EventOddsHistoryMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EventOddsHistoryMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EventOddsHistoryMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EventOddsHistoryMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private Origin origin;
  private CharSequence id;
  private EventInfo eventInfo;
  private LiveScores liveScores;
  private java.util.Map<CharSequence, Score> typedScores;
  private CharSequence timestamp;
  private LiveScores gcsPartitioner;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EventOddsHistoryMessage() {}

  /**
   * All-args constructor.
   * @param origin The new value for origin
   * @param id The new value for id
   * @param eventInfo The new value for eventInfo
   * @param liveScores The new value for liveScores
   * @param typedScores The new value for typedScores
   * @param timestamp The new value for timestamp
   * @param gcsPartitioner The new value for gcsPartitioner
   */
  public EventOddsHistoryMessage(Origin origin, CharSequence id, EventInfo eventInfo, LiveScores liveScores, java.util.Map<CharSequence, Score> typedScores, CharSequence timestamp, LiveScores gcsPartitioner) {
    this.origin = origin;
    this.id = id;
    this.eventInfo = eventInfo;
    this.liveScores = liveScores;
    this.typedScores = typedScores;
    this.timestamp = timestamp;
    this.gcsPartitioner = gcsPartitioner;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return origin;
    case 1: return id;
    case 2: return eventInfo;
    case 3: return liveScores;
    case 4: return typedScores;
    case 5: return timestamp;
    case 6: return gcsPartitioner;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: origin = (Origin)value$; break;
    case 1: id = (CharSequence)value$; break;
    case 2: eventInfo = (EventInfo)value$; break;
    case 3: liveScores = (LiveScores)value$; break;
    case 4: typedScores = (java.util.Map<CharSequence, Score>)value$; break;
    case 5: timestamp = (CharSequence)value$; break;
    case 6: gcsPartitioner = (LiveScores)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'origin' field.
   * @return The value of the 'origin' field.
   */
  public Origin getOrigin() {
    return origin;
  }


  /**
   * Sets the value of the 'origin' field.
   * @param value the value to set.
   */
  public void setOrigin(Origin value) {
    this.origin = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'eventInfo' field.
   * @return The value of the 'eventInfo' field.
   */
  public EventInfo getEventInfo() {
    return eventInfo;
  }


  /**
   * Sets the value of the 'eventInfo' field.
   * @param value the value to set.
   */
  public void setEventInfo(EventInfo value) {
    this.eventInfo = value;
  }

  /**
   * Gets the value of the 'liveScores' field.
   * @return The value of the 'liveScores' field.
   */
  public LiveScores getLiveScores() {
    return liveScores;
  }


  /**
   * Sets the value of the 'liveScores' field.
   * @param value the value to set.
   */
  public void setLiveScores(LiveScores value) {
    this.liveScores = value;
  }

  /**
   * Gets the value of the 'typedScores' field.
   * @return The value of the 'typedScores' field.
   */
  public java.util.Map<CharSequence, Score> getTypedScores() {
    return typedScores;
  }


  /**
   * Sets the value of the 'typedScores' field.
   * @param value the value to set.
   */
  public void setTypedScores(java.util.Map<CharSequence, Score> value) {
    this.typedScores = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public CharSequence getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'gcsPartitioner' field.
   * @return The value of the 'gcsPartitioner' field.
   */
  public LiveScores getGcsPartitioner() {
    return gcsPartitioner;
  }


  /**
   * Sets the value of the 'gcsPartitioner' field.
   * @param value the value to set.
   */
  public void setGcsPartitioner(LiveScores value) {
    this.gcsPartitioner = value;
  }

  /**
   * Creates a new EventOddsHistoryMessage RecordBuilder.
   * @return A new EventOddsHistoryMessage RecordBuilder
   */
  public static EventOddsHistoryMessage.Builder newBuilder() {
    return new EventOddsHistoryMessage.Builder();
  }

  /**
   * Creates a new EventOddsHistoryMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EventOddsHistoryMessage RecordBuilder
   */
  public static EventOddsHistoryMessage.Builder newBuilder(EventOddsHistoryMessage.Builder other) {
    if (other == null) {
      return new EventOddsHistoryMessage.Builder();
    } else {
      return new EventOddsHistoryMessage.Builder(other);
    }
  }

  /**
   * Creates a new EventOddsHistoryMessage RecordBuilder by copying an existing EventOddsHistoryMessage instance.
   * @param other The existing instance to copy.
   * @return A new EventOddsHistoryMessage RecordBuilder
   */
  public static EventOddsHistoryMessage.Builder newBuilder(EventOddsHistoryMessage other) {
    if (other == null) {
      return new EventOddsHistoryMessage.Builder();
    } else {
      return new EventOddsHistoryMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for EventOddsHistoryMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EventOddsHistoryMessage>
    implements org.apache.avro.data.RecordBuilder<EventOddsHistoryMessage> {

    private Origin origin;
    private Origin.Builder originBuilder;
    private CharSequence id;
    private EventInfo eventInfo;
    private EventInfo.Builder eventInfoBuilder;
    private LiveScores liveScores;
    private LiveScores.Builder liveScoresBuilder;
    private java.util.Map<CharSequence, Score> typedScores;
    private CharSequence timestamp;
    private LiveScores gcsPartitioner;
    private LiveScores.Builder gcsPartitionerBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(EventOddsHistoryMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.origin)) {
        this.origin = data().deepCopy(fields()[0].schema(), other.origin);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasOriginBuilder()) {
        this.originBuilder = Origin.newBuilder(other.getOriginBuilder());
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.eventInfo)) {
        this.eventInfo = data().deepCopy(fields()[2].schema(), other.eventInfo);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasEventInfoBuilder()) {
        this.eventInfoBuilder = EventInfo.newBuilder(other.getEventInfoBuilder());
      }
      if (isValidValue(fields()[3], other.liveScores)) {
        this.liveScores = data().deepCopy(fields()[3].schema(), other.liveScores);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasLiveScoresBuilder()) {
        this.liveScoresBuilder = LiveScores.newBuilder(other.getLiveScoresBuilder());
      }
      if (isValidValue(fields()[4], other.typedScores)) {
        this.typedScores = data().deepCopy(fields()[4].schema(), other.typedScores);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.gcsPartitioner)) {
        this.gcsPartitioner = data().deepCopy(fields()[6].schema(), other.gcsPartitioner);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (other.hasGcsPartitionerBuilder()) {
        this.gcsPartitionerBuilder = LiveScores.newBuilder(other.getGcsPartitionerBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing EventOddsHistoryMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(EventOddsHistoryMessage other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.origin)) {
        this.origin = data().deepCopy(fields()[0].schema(), other.origin);
        fieldSetFlags()[0] = true;
      }
      this.originBuilder = null;
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.eventInfo)) {
        this.eventInfo = data().deepCopy(fields()[2].schema(), other.eventInfo);
        fieldSetFlags()[2] = true;
      }
      this.eventInfoBuilder = null;
      if (isValidValue(fields()[3], other.liveScores)) {
        this.liveScores = data().deepCopy(fields()[3].schema(), other.liveScores);
        fieldSetFlags()[3] = true;
      }
      this.liveScoresBuilder = null;
      if (isValidValue(fields()[4], other.typedScores)) {
        this.typedScores = data().deepCopy(fields()[4].schema(), other.typedScores);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.gcsPartitioner)) {
        this.gcsPartitioner = data().deepCopy(fields()[6].schema(), other.gcsPartitioner);
        fieldSetFlags()[6] = true;
      }
      this.gcsPartitionerBuilder = null;
    }

    /**
      * Gets the value of the 'origin' field.
      * @return The value.
      */
    public Origin getOrigin() {
      return origin;
    }


    /**
      * Sets the value of the 'origin' field.
      * @param value The value of 'origin'.
      * @return This builder.
      */
    public EventOddsHistoryMessage.Builder setOrigin(Origin value) {
      validate(fields()[0], value);
      this.originBuilder = null;
      this.origin = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'origin' field has been set.
      * @return True if the 'origin' field has been set, false otherwise.
      */
    public boolean hasOrigin() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'origin' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Origin.Builder getOriginBuilder() {
      if (originBuilder == null) {
        if (hasOrigin()) {
          setOriginBuilder(Origin.newBuilder(origin));
        } else {
          setOriginBuilder(Origin.newBuilder());
        }
      }
      return originBuilder;
    }

    /**
     * Sets the Builder instance for the 'origin' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public EventOddsHistoryMessage.Builder setOriginBuilder(Origin.Builder value) {
      clearOrigin();
      originBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'origin' field has an active Builder instance
     * @return True if the 'origin' field has an active Builder instance
     */
    public boolean hasOriginBuilder() {
      return originBuilder != null;
    }

    /**
      * Clears the value of the 'origin' field.
      * @return This builder.
      */
    public EventOddsHistoryMessage.Builder clearOrigin() {
      origin = null;
      originBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public EventOddsHistoryMessage.Builder setId(CharSequence value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public EventOddsHistoryMessage.Builder clearId() {
      id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventInfo' field.
      * @return The value.
      */
    public EventInfo getEventInfo() {
      return eventInfo;
    }


    /**
      * Sets the value of the 'eventInfo' field.
      * @param value The value of 'eventInfo'.
      * @return This builder.
      */
    public EventOddsHistoryMessage.Builder setEventInfo(EventInfo value) {
      validate(fields()[2], value);
      this.eventInfoBuilder = null;
      this.eventInfo = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'eventInfo' field has been set.
      * @return True if the 'eventInfo' field has been set, false otherwise.
      */
    public boolean hasEventInfo() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'eventInfo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public EventInfo.Builder getEventInfoBuilder() {
      if (eventInfoBuilder == null) {
        if (hasEventInfo()) {
          setEventInfoBuilder(EventInfo.newBuilder(eventInfo));
        } else {
          setEventInfoBuilder(EventInfo.newBuilder());
        }
      }
      return eventInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'eventInfo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public EventOddsHistoryMessage.Builder setEventInfoBuilder(EventInfo.Builder value) {
      clearEventInfo();
      eventInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'eventInfo' field has an active Builder instance
     * @return True if the 'eventInfo' field has an active Builder instance
     */
    public boolean hasEventInfoBuilder() {
      return eventInfoBuilder != null;
    }

    /**
      * Clears the value of the 'eventInfo' field.
      * @return This builder.
      */
    public EventOddsHistoryMessage.Builder clearEventInfo() {
      eventInfo = null;
      eventInfoBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'liveScores' field.
      * @return The value.
      */
    public LiveScores getLiveScores() {
      return liveScores;
    }


    /**
      * Sets the value of the 'liveScores' field.
      * @param value The value of 'liveScores'.
      * @return This builder.
      */
    public EventOddsHistoryMessage.Builder setLiveScores(LiveScores value) {
      validate(fields()[3], value);
      this.liveScoresBuilder = null;
      this.liveScores = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'liveScores' field has been set.
      * @return True if the 'liveScores' field has been set, false otherwise.
      */
    public boolean hasLiveScores() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'liveScores' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public LiveScores.Builder getLiveScoresBuilder() {
      if (liveScoresBuilder == null) {
        if (hasLiveScores()) {
          setLiveScoresBuilder(LiveScores.newBuilder(liveScores));
        } else {
          setLiveScoresBuilder(LiveScores.newBuilder());
        }
      }
      return liveScoresBuilder;
    }

    /**
     * Sets the Builder instance for the 'liveScores' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public EventOddsHistoryMessage.Builder setLiveScoresBuilder(LiveScores.Builder value) {
      clearLiveScores();
      liveScoresBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'liveScores' field has an active Builder instance
     * @return True if the 'liveScores' field has an active Builder instance
     */
    public boolean hasLiveScoresBuilder() {
      return liveScoresBuilder != null;
    }

    /**
      * Clears the value of the 'liveScores' field.
      * @return This builder.
      */
    public EventOddsHistoryMessage.Builder clearLiveScores() {
      liveScores = null;
      liveScoresBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'typedScores' field.
      * @return The value.
      */
    public java.util.Map<CharSequence, Score> getTypedScores() {
      return typedScores;
    }


    /**
      * Sets the value of the 'typedScores' field.
      * @param value The value of 'typedScores'.
      * @return This builder.
      */
    public EventOddsHistoryMessage.Builder setTypedScores(java.util.Map<CharSequence, Score> value) {
      validate(fields()[4], value);
      this.typedScores = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'typedScores' field has been set.
      * @return True if the 'typedScores' field has been set, false otherwise.
      */
    public boolean hasTypedScores() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'typedScores' field.
      * @return This builder.
      */
    public EventOddsHistoryMessage.Builder clearTypedScores() {
      typedScores = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public CharSequence getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public EventOddsHistoryMessage.Builder setTimestamp(CharSequence value) {
      validate(fields()[5], value);
      this.timestamp = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public EventOddsHistoryMessage.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'gcsPartitioner' field.
      * @return The value.
      */
    public LiveScores getGcsPartitioner() {
      return gcsPartitioner;
    }


    /**
      * Sets the value of the 'gcsPartitioner' field.
      * @param value The value of 'gcsPartitioner'.
      * @return This builder.
      */
    public EventOddsHistoryMessage.Builder setGcsPartitioner(LiveScores value) {
      validate(fields()[6], value);
      this.gcsPartitionerBuilder = null;
      this.gcsPartitioner = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'gcsPartitioner' field has been set.
      * @return True if the 'gcsPartitioner' field has been set, false otherwise.
      */
    public boolean hasGcsPartitioner() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'gcsPartitioner' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public LiveScores.Builder getGcsPartitionerBuilder() {
      if (gcsPartitionerBuilder == null) {
        if (hasGcsPartitioner()) {
          setGcsPartitionerBuilder(LiveScores.newBuilder(gcsPartitioner));
        } else {
          setGcsPartitionerBuilder(LiveScores.newBuilder());
        }
      }
      return gcsPartitionerBuilder;
    }

    /**
     * Sets the Builder instance for the 'gcsPartitioner' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public EventOddsHistoryMessage.Builder setGcsPartitionerBuilder(LiveScores.Builder value) {
      clearGcsPartitioner();
      gcsPartitionerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'gcsPartitioner' field has an active Builder instance
     * @return True if the 'gcsPartitioner' field has an active Builder instance
     */
    public boolean hasGcsPartitionerBuilder() {
      return gcsPartitionerBuilder != null;
    }

    /**
      * Clears the value of the 'gcsPartitioner' field.
      * @return This builder.
      */
    public EventOddsHistoryMessage.Builder clearGcsPartitioner() {
      gcsPartitioner = null;
      gcsPartitionerBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EventOddsHistoryMessage build() {
      try {
        EventOddsHistoryMessage record = new EventOddsHistoryMessage();
        if (originBuilder != null) {
          try {
            record.origin = this.originBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("origin"));
            throw e;
          }
        } else {
          record.origin = fieldSetFlags()[0] ? this.origin : (Origin) defaultValue(fields()[0]);
        }
        record.id = fieldSetFlags()[1] ? this.id : (CharSequence) defaultValue(fields()[1]);
        if (eventInfoBuilder != null) {
          try {
            record.eventInfo = this.eventInfoBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("eventInfo"));
            throw e;
          }
        } else {
          record.eventInfo = fieldSetFlags()[2] ? this.eventInfo : (EventInfo) defaultValue(fields()[2]);
        }
        if (liveScoresBuilder != null) {
          try {
            record.liveScores = this.liveScoresBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("liveScores"));
            throw e;
          }
        } else {
          record.liveScores = fieldSetFlags()[3] ? this.liveScores : (LiveScores) defaultValue(fields()[3]);
        }
        record.typedScores = fieldSetFlags()[4] ? this.typedScores : (java.util.Map<CharSequence, Score>) defaultValue(fields()[4]);
        record.timestamp = fieldSetFlags()[5] ? this.timestamp : (CharSequence) defaultValue(fields()[5]);
        if (gcsPartitionerBuilder != null) {
          try {
            record.gcsPartitioner = this.gcsPartitionerBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("gcsPartitioner"));
            throw e;
          }
        } else {
          record.gcsPartitioner = fieldSetFlags()[6] ? this.gcsPartitioner : (LiveScores) defaultValue(fields()[6]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EventOddsHistoryMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<EventOddsHistoryMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EventOddsHistoryMessage>
    READER$ = (org.apache.avro.io.DatumReader<EventOddsHistoryMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.origin == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.origin.customEncode(out);
    }

    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id);
    }

    if (this.eventInfo == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.eventInfo.customEncode(out);
    }

    if (this.liveScores == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.liveScores.customEncode(out);
    }

    if (this.typedScores == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.typedScores.size();
      out.writeMapStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.util.Map.Entry<CharSequence, Score> e0: this.typedScores.entrySet()) {
        actualSize0++;
        out.startItem();
        out.writeString(e0.getKey());
        Score v0 = e0.getValue();
        v0.customEncode(out);
      }
      out.writeMapEnd();
      if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.timestamp == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.timestamp);
    }

    if (this.gcsPartitioner == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.gcsPartitioner.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.origin = null;
      } else {
        if (this.origin == null) {
          this.origin = new Origin();
        }
        this.origin.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.eventInfo = null;
      } else {
        if (this.eventInfo == null) {
          this.eventInfo = new EventInfo();
        }
        this.eventInfo.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.liveScores = null;
      } else {
        if (this.liveScores == null) {
          this.liveScores = new LiveScores();
        }
        this.liveScores.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.typedScores = null;
      } else {
        long size0 = in.readMapStart();
        java.util.Map<CharSequence, Score> m0 = this.typedScores; // Need fresh name due to limitation of macro system
        if (m0 == null) {
          m0 = new java.util.HashMap<CharSequence, Score>((int)size0);
          this.typedScores = m0;
        } else m0.clear();
        for ( ; 0 < size0; size0 = in.mapNext()) {
          for ( ; size0 != 0; size0--) {
            CharSequence k0 = null;
            k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
            Score v0 = null;
            if (v0 == null) {
              v0 = new Score();
            }
            v0.customDecode(in);
            m0.put(k0, v0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.timestamp = null;
      } else {
        this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.gcsPartitioner = null;
      } else {
        if (this.gcsPartitioner == null) {
          this.gcsPartitioner = new LiveScores();
        }
        this.gcsPartitioner.customDecode(in);
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.origin = null;
          } else {
            if (this.origin == null) {
              this.origin = new Origin();
            }
            this.origin.customDecode(in);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.eventInfo = null;
          } else {
            if (this.eventInfo == null) {
              this.eventInfo = new EventInfo();
            }
            this.eventInfo.customDecode(in);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.liveScores = null;
          } else {
            if (this.liveScores == null) {
              this.liveScores = new LiveScores();
            }
            this.liveScores.customDecode(in);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.typedScores = null;
          } else {
            long size0 = in.readMapStart();
            java.util.Map<CharSequence, Score> m0 = this.typedScores; // Need fresh name due to limitation of macro system
            if (m0 == null) {
              m0 = new java.util.HashMap<CharSequence, Score>((int)size0);
              this.typedScores = m0;
            } else m0.clear();
            for ( ; 0 < size0; size0 = in.mapNext()) {
              for ( ; size0 != 0; size0--) {
                CharSequence k0 = null;
                k0 = in.readString(k0 instanceof Utf8 ? (Utf8)k0 : null);
                Score v0 = null;
                if (v0 == null) {
                  v0 = new Score();
                }
                v0.customDecode(in);
                m0.put(k0, v0);
              }
            }
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.timestamp = null;
          } else {
            this.timestamp = in.readString(this.timestamp instanceof Utf8 ? (Utf8)this.timestamp : null);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.gcsPartitioner = null;
          } else {
            if (this.gcsPartitioner == null) {
              this.gcsPartitioner = new LiveScores();
            }
            this.gcsPartitioner.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










