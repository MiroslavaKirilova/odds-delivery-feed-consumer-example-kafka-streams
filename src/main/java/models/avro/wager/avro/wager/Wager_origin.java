/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package models.avro.wager.avro.wager;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Wager_origin extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6912808095759429305L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Wager_origin\",\"namespace\":\"models.avro.wager\",\"fields\":[{\"name\":\"stream\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"environment\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Wager_origin> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Wager_origin> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Wager_origin> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Wager_origin> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Wager_origin> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Wager_origin to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Wager_origin from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Wager_origin instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Wager_origin fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private CharSequence stream;
  private CharSequence type;
  private CharSequence environment;
  private CharSequence version;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Wager_origin() {}

  /**
   * All-args constructor.
   * @param stream The new value for stream
   * @param type The new value for type
   * @param environment The new value for environment
   * @param version The new value for version
   */
  public Wager_origin(CharSequence stream, CharSequence type, CharSequence environment, CharSequence version) {
    this.stream = stream;
    this.type = type;
    this.environment = environment;
    this.version = version;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return stream;
    case 1: return type;
    case 2: return environment;
    case 3: return version;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: stream = (CharSequence)value$; break;
    case 1: type = (CharSequence)value$; break;
    case 2: environment = (CharSequence)value$; break;
    case 3: version = (CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'stream' field.
   * @return The value of the 'stream' field.
   */
  public CharSequence getStream() {
    return stream;
  }


  /**
   * Sets the value of the 'stream' field.
   * @param value the value to set.
   */
  public void setStream(CharSequence value) {
    this.stream = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'environment' field.
   * @return The value of the 'environment' field.
   */
  public CharSequence getEnvironment() {
    return environment;
  }


  /**
   * Sets the value of the 'environment' field.
   * @param value the value to set.
   */
  public void setEnvironment(CharSequence value) {
    this.environment = value;
  }

  /**
   * Gets the value of the 'version' field.
   * @return The value of the 'version' field.
   */
  public CharSequence getVersion() {
    return version;
  }


  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(CharSequence value) {
    this.version = value;
  }

  /**
   * Creates a new Wager_origin RecordBuilder.
   * @return A new Wager_origin RecordBuilder
   */
  public static Wager_origin.Builder newBuilder() {
    return new Wager_origin.Builder();
  }

  /**
   * Creates a new Wager_origin RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Wager_origin RecordBuilder
   */
  public static Wager_origin.Builder newBuilder(Wager_origin.Builder other) {
    if (other == null) {
      return new Wager_origin.Builder();
    } else {
      return new Wager_origin.Builder(other);
    }
  }

  /**
   * Creates a new Wager_origin RecordBuilder by copying an existing Wager_origin instance.
   * @param other The existing instance to copy.
   * @return A new Wager_origin RecordBuilder
   */
  public static Wager_origin.Builder newBuilder(Wager_origin other) {
    if (other == null) {
      return new Wager_origin.Builder();
    } else {
      return new Wager_origin.Builder(other);
    }
  }

  /**
   * RecordBuilder for Wager_origin instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Wager_origin>
    implements org.apache.avro.data.RecordBuilder<Wager_origin> {

    private CharSequence stream;
    private CharSequence type;
    private CharSequence environment;
    private CharSequence version;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Wager_origin.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.stream)) {
        this.stream = data().deepCopy(fields()[0].schema(), other.stream);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.environment)) {
        this.environment = data().deepCopy(fields()[2].schema(), other.environment);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.version)) {
        this.version = data().deepCopy(fields()[3].schema(), other.version);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Wager_origin instance
     * @param other The existing instance to copy.
     */
    private Builder(Wager_origin other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.stream)) {
        this.stream = data().deepCopy(fields()[0].schema(), other.stream);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.environment)) {
        this.environment = data().deepCopy(fields()[2].schema(), other.environment);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.version)) {
        this.version = data().deepCopy(fields()[3].schema(), other.version);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'stream' field.
      * @return The value.
      */
    public CharSequence getStream() {
      return stream;
    }


    /**
      * Sets the value of the 'stream' field.
      * @param value The value of 'stream'.
      * @return This builder.
      */
    public Wager_origin.Builder setStream(CharSequence value) {
      validate(fields()[0], value);
      this.stream = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'stream' field has been set.
      * @return True if the 'stream' field has been set, false otherwise.
      */
    public boolean hasStream() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'stream' field.
      * @return This builder.
      */
    public Wager_origin.Builder clearStream() {
      stream = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public Wager_origin.Builder setType(CharSequence value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public Wager_origin.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'environment' field.
      * @return The value.
      */
    public CharSequence getEnvironment() {
      return environment;
    }


    /**
      * Sets the value of the 'environment' field.
      * @param value The value of 'environment'.
      * @return This builder.
      */
    public Wager_origin.Builder setEnvironment(CharSequence value) {
      validate(fields()[2], value);
      this.environment = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'environment' field has been set.
      * @return True if the 'environment' field has been set, false otherwise.
      */
    public boolean hasEnvironment() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'environment' field.
      * @return This builder.
      */
    public Wager_origin.Builder clearEnvironment() {
      environment = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'version' field.
      * @return The value.
      */
    public CharSequence getVersion() {
      return version;
    }


    /**
      * Sets the value of the 'version' field.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public Wager_origin.Builder setVersion(CharSequence value) {
      validate(fields()[3], value);
      this.version = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'version' field.
      * @return This builder.
      */
    public Wager_origin.Builder clearVersion() {
      version = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Wager_origin build() {
      try {
        Wager_origin record = new Wager_origin();
        record.stream = fieldSetFlags()[0] ? this.stream : (CharSequence) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (CharSequence) defaultValue(fields()[1]);
        record.environment = fieldSetFlags()[2] ? this.environment : (CharSequence) defaultValue(fields()[2]);
        record.version = fieldSetFlags()[3] ? this.version : (CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Wager_origin>
    WRITER$ = (org.apache.avro.io.DatumWriter<Wager_origin>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Wager_origin>
    READER$ = (org.apache.avro.io.DatumReader<Wager_origin>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.stream == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.stream);
    }

    if (this.type == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.type);
    }

    if (this.environment == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.environment);
    }

    if (this.version == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.version);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.stream = null;
      } else {
        this.stream = in.readString(this.stream instanceof Utf8 ? (Utf8)this.stream : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.type = null;
      } else {
        this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.environment = null;
      } else {
        this.environment = in.readString(this.environment instanceof Utf8 ? (Utf8)this.environment : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.version = null;
      } else {
        this.version = in.readString(this.version instanceof Utf8 ? (Utf8)this.version : null);
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.stream = null;
          } else {
            this.stream = in.readString(this.stream instanceof Utf8 ? (Utf8)this.stream : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.type = null;
          } else {
            this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.environment = null;
          } else {
            this.environment = in.readString(this.environment instanceof Utf8 ? (Utf8)this.environment : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.version = null;
          } else {
            this.version = in.readString(this.version instanceof Utf8 ? (Utf8)this.version : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










