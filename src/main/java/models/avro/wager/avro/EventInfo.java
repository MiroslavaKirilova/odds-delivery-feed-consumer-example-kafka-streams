/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package models.avro.wager.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class EventInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -646335941943097876L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EventInfo\",\"namespace\":\"models.avro\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"state\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"liveGamePeriod\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LiveGamePeriod\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"liveMinute\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"marketsCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"startDate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"timeRange\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"sport\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Sport\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"title\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"key\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"country\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Country\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"title\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"league\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"League\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"title\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"format\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"teams\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Teams\",\"fields\":[{\"name\":\"home\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Team\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"color\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"away\",\"type\":[\"null\",\"Team\"],\"default\":null}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EventInfo> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EventInfo> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EventInfo> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EventInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EventInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EventInfo to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EventInfo from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EventInfo instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EventInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private CharSequence id;
  private CharSequence state;
  private CharSequence status;
  private LiveGamePeriod liveGamePeriod;
  private Integer liveMinute;
  private Integer marketsCount;
  private CharSequence startDate;
  private CharSequence timeRange;
  private Sport sport;
  private Country country;
  private League league;
  private Teams teams;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EventInfo() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param state The new value for state
   * @param status The new value for status
   * @param liveGamePeriod The new value for liveGamePeriod
   * @param liveMinute The new value for liveMinute
   * @param marketsCount The new value for marketsCount
   * @param startDate The new value for startDate
   * @param timeRange The new value for timeRange
   * @param sport The new value for sport
   * @param country The new value for country
   * @param league The new value for league
   * @param teams The new value for teams
   */
  public EventInfo(CharSequence id, CharSequence state, CharSequence status, LiveGamePeriod liveGamePeriod, Integer liveMinute, Integer marketsCount, CharSequence startDate, CharSequence timeRange, Sport sport, Country country, League league, Teams teams) {
    this.id = id;
    this.state = state;
    this.status = status;
    this.liveGamePeriod = liveGamePeriod;
    this.liveMinute = liveMinute;
    this.marketsCount = marketsCount;
    this.startDate = startDate;
    this.timeRange = timeRange;
    this.sport = sport;
    this.country = country;
    this.league = league;
    this.teams = teams;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return state;
    case 2: return status;
    case 3: return liveGamePeriod;
    case 4: return liveMinute;
    case 5: return marketsCount;
    case 6: return startDate;
    case 7: return timeRange;
    case 8: return sport;
    case 9: return country;
    case 10: return league;
    case 11: return teams;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (CharSequence)value$; break;
    case 1: state = (CharSequence)value$; break;
    case 2: status = (CharSequence)value$; break;
    case 3: liveGamePeriod = (LiveGamePeriod)value$; break;
    case 4: liveMinute = (Integer)value$; break;
    case 5: marketsCount = (Integer)value$; break;
    case 6: startDate = (CharSequence)value$; break;
    case 7: timeRange = (CharSequence)value$; break;
    case 8: sport = (Sport)value$; break;
    case 9: country = (Country)value$; break;
    case 10: league = (League)value$; break;
    case 11: teams = (Teams)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public CharSequence getState() {
    return state;
  }


  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(CharSequence value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'liveGamePeriod' field.
   * @return The value of the 'liveGamePeriod' field.
   */
  public LiveGamePeriod getLiveGamePeriod() {
    return liveGamePeriod;
  }


  /**
   * Sets the value of the 'liveGamePeriod' field.
   * @param value the value to set.
   */
  public void setLiveGamePeriod(LiveGamePeriod value) {
    this.liveGamePeriod = value;
  }

  /**
   * Gets the value of the 'liveMinute' field.
   * @return The value of the 'liveMinute' field.
   */
  public Integer getLiveMinute() {
    return liveMinute;
  }


  /**
   * Sets the value of the 'liveMinute' field.
   * @param value the value to set.
   */
  public void setLiveMinute(Integer value) {
    this.liveMinute = value;
  }

  /**
   * Gets the value of the 'marketsCount' field.
   * @return The value of the 'marketsCount' field.
   */
  public Integer getMarketsCount() {
    return marketsCount;
  }


  /**
   * Sets the value of the 'marketsCount' field.
   * @param value the value to set.
   */
  public void setMarketsCount(Integer value) {
    this.marketsCount = value;
  }

  /**
   * Gets the value of the 'startDate' field.
   * @return The value of the 'startDate' field.
   */
  public CharSequence getStartDate() {
    return startDate;
  }


  /**
   * Sets the value of the 'startDate' field.
   * @param value the value to set.
   */
  public void setStartDate(CharSequence value) {
    this.startDate = value;
  }

  /**
   * Gets the value of the 'timeRange' field.
   * @return The value of the 'timeRange' field.
   */
  public CharSequence getTimeRange() {
    return timeRange;
  }


  /**
   * Sets the value of the 'timeRange' field.
   * @param value the value to set.
   */
  public void setTimeRange(CharSequence value) {
    this.timeRange = value;
  }

  /**
   * Gets the value of the 'sport' field.
   * @return The value of the 'sport' field.
   */
  public Sport getSport() {
    return sport;
  }


  /**
   * Sets the value of the 'sport' field.
   * @param value the value to set.
   */
  public void setSport(Sport value) {
    this.sport = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public Country getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(Country value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'league' field.
   * @return The value of the 'league' field.
   */
  public League getLeague() {
    return league;
  }


  /**
   * Sets the value of the 'league' field.
   * @param value the value to set.
   */
  public void setLeague(League value) {
    this.league = value;
  }

  /**
   * Gets the value of the 'teams' field.
   * @return The value of the 'teams' field.
   */
  public Teams getTeams() {
    return teams;
  }


  /**
   * Sets the value of the 'teams' field.
   * @param value the value to set.
   */
  public void setTeams(Teams value) {
    this.teams = value;
  }

  /**
   * Creates a new EventInfo RecordBuilder.
   * @return A new EventInfo RecordBuilder
   */
  public static EventInfo.Builder newBuilder() {
    return new EventInfo.Builder();
  }

  /**
   * Creates a new EventInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EventInfo RecordBuilder
   */
  public static EventInfo.Builder newBuilder(EventInfo.Builder other) {
    if (other == null) {
      return new EventInfo.Builder();
    } else {
      return new EventInfo.Builder(other);
    }
  }

  /**
   * Creates a new EventInfo RecordBuilder by copying an existing EventInfo instance.
   * @param other The existing instance to copy.
   * @return A new EventInfo RecordBuilder
   */
  public static EventInfo.Builder newBuilder(EventInfo other) {
    if (other == null) {
      return new EventInfo.Builder();
    } else {
      return new EventInfo.Builder(other);
    }
  }

  /**
   * RecordBuilder for EventInfo instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EventInfo>
    implements org.apache.avro.data.RecordBuilder<EventInfo> {

    private CharSequence id;
    private CharSequence state;
    private CharSequence status;
    private LiveGamePeriod liveGamePeriod;
    private LiveGamePeriod.Builder liveGamePeriodBuilder;
    private Integer liveMinute;
    private Integer marketsCount;
    private CharSequence startDate;
    private CharSequence timeRange;
    private Sport sport;
    private Sport.Builder sportBuilder;
    private Country country;
    private Country.Builder countryBuilder;
    private League league;
    private League.Builder leagueBuilder;
    private Teams teams;
    private Teams.Builder teamsBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(EventInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.state)) {
        this.state = data().deepCopy(fields()[1].schema(), other.state);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.liveGamePeriod)) {
        this.liveGamePeriod = data().deepCopy(fields()[3].schema(), other.liveGamePeriod);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasLiveGamePeriodBuilder()) {
        this.liveGamePeriodBuilder = LiveGamePeriod.newBuilder(other.getLiveGamePeriodBuilder());
      }
      if (isValidValue(fields()[4], other.liveMinute)) {
        this.liveMinute = data().deepCopy(fields()[4].schema(), other.liveMinute);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.marketsCount)) {
        this.marketsCount = data().deepCopy(fields()[5].schema(), other.marketsCount);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.startDate)) {
        this.startDate = data().deepCopy(fields()[6].schema(), other.startDate);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.timeRange)) {
        this.timeRange = data().deepCopy(fields()[7].schema(), other.timeRange);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.sport)) {
        this.sport = data().deepCopy(fields()[8].schema(), other.sport);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (other.hasSportBuilder()) {
        this.sportBuilder = Sport.newBuilder(other.getSportBuilder());
      }
      if (isValidValue(fields()[9], other.country)) {
        this.country = data().deepCopy(fields()[9].schema(), other.country);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (other.hasCountryBuilder()) {
        this.countryBuilder = Country.newBuilder(other.getCountryBuilder());
      }
      if (isValidValue(fields()[10], other.league)) {
        this.league = data().deepCopy(fields()[10].schema(), other.league);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (other.hasLeagueBuilder()) {
        this.leagueBuilder = League.newBuilder(other.getLeagueBuilder());
      }
      if (isValidValue(fields()[11], other.teams)) {
        this.teams = data().deepCopy(fields()[11].schema(), other.teams);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (other.hasTeamsBuilder()) {
        this.teamsBuilder = Teams.newBuilder(other.getTeamsBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing EventInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(EventInfo other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.state)) {
        this.state = data().deepCopy(fields()[1].schema(), other.state);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.liveGamePeriod)) {
        this.liveGamePeriod = data().deepCopy(fields()[3].schema(), other.liveGamePeriod);
        fieldSetFlags()[3] = true;
      }
      this.liveGamePeriodBuilder = null;
      if (isValidValue(fields()[4], other.liveMinute)) {
        this.liveMinute = data().deepCopy(fields()[4].schema(), other.liveMinute);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.marketsCount)) {
        this.marketsCount = data().deepCopy(fields()[5].schema(), other.marketsCount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.startDate)) {
        this.startDate = data().deepCopy(fields()[6].schema(), other.startDate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.timeRange)) {
        this.timeRange = data().deepCopy(fields()[7].schema(), other.timeRange);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.sport)) {
        this.sport = data().deepCopy(fields()[8].schema(), other.sport);
        fieldSetFlags()[8] = true;
      }
      this.sportBuilder = null;
      if (isValidValue(fields()[9], other.country)) {
        this.country = data().deepCopy(fields()[9].schema(), other.country);
        fieldSetFlags()[9] = true;
      }
      this.countryBuilder = null;
      if (isValidValue(fields()[10], other.league)) {
        this.league = data().deepCopy(fields()[10].schema(), other.league);
        fieldSetFlags()[10] = true;
      }
      this.leagueBuilder = null;
      if (isValidValue(fields()[11], other.teams)) {
        this.teams = data().deepCopy(fields()[11].schema(), other.teams);
        fieldSetFlags()[11] = true;
      }
      this.teamsBuilder = null;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public EventInfo.Builder setId(CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public EventInfo.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public CharSequence getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public EventInfo.Builder setState(CharSequence value) {
      validate(fields()[1], value);
      this.state = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public EventInfo.Builder clearState() {
      state = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public EventInfo.Builder setStatus(CharSequence value) {
      validate(fields()[2], value);
      this.status = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public EventInfo.Builder clearStatus() {
      status = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'liveGamePeriod' field.
      * @return The value.
      */
    public LiveGamePeriod getLiveGamePeriod() {
      return liveGamePeriod;
    }


    /**
      * Sets the value of the 'liveGamePeriod' field.
      * @param value The value of 'liveGamePeriod'.
      * @return This builder.
      */
    public EventInfo.Builder setLiveGamePeriod(LiveGamePeriod value) {
      validate(fields()[3], value);
      this.liveGamePeriodBuilder = null;
      this.liveGamePeriod = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'liveGamePeriod' field has been set.
      * @return True if the 'liveGamePeriod' field has been set, false otherwise.
      */
    public boolean hasLiveGamePeriod() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'liveGamePeriod' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public LiveGamePeriod.Builder getLiveGamePeriodBuilder() {
      if (liveGamePeriodBuilder == null) {
        if (hasLiveGamePeriod()) {
          setLiveGamePeriodBuilder(LiveGamePeriod.newBuilder(liveGamePeriod));
        } else {
          setLiveGamePeriodBuilder(LiveGamePeriod.newBuilder());
        }
      }
      return liveGamePeriodBuilder;
    }

    /**
     * Sets the Builder instance for the 'liveGamePeriod' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public EventInfo.Builder setLiveGamePeriodBuilder(LiveGamePeriod.Builder value) {
      clearLiveGamePeriod();
      liveGamePeriodBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'liveGamePeriod' field has an active Builder instance
     * @return True if the 'liveGamePeriod' field has an active Builder instance
     */
    public boolean hasLiveGamePeriodBuilder() {
      return liveGamePeriodBuilder != null;
    }

    /**
      * Clears the value of the 'liveGamePeriod' field.
      * @return This builder.
      */
    public EventInfo.Builder clearLiveGamePeriod() {
      liveGamePeriod = null;
      liveGamePeriodBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'liveMinute' field.
      * @return The value.
      */
    public Integer getLiveMinute() {
      return liveMinute;
    }


    /**
      * Sets the value of the 'liveMinute' field.
      * @param value The value of 'liveMinute'.
      * @return This builder.
      */
    public EventInfo.Builder setLiveMinute(Integer value) {
      validate(fields()[4], value);
      this.liveMinute = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'liveMinute' field has been set.
      * @return True if the 'liveMinute' field has been set, false otherwise.
      */
    public boolean hasLiveMinute() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'liveMinute' field.
      * @return This builder.
      */
    public EventInfo.Builder clearLiveMinute() {
      liveMinute = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'marketsCount' field.
      * @return The value.
      */
    public Integer getMarketsCount() {
      return marketsCount;
    }


    /**
      * Sets the value of the 'marketsCount' field.
      * @param value The value of 'marketsCount'.
      * @return This builder.
      */
    public EventInfo.Builder setMarketsCount(Integer value) {
      validate(fields()[5], value);
      this.marketsCount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'marketsCount' field has been set.
      * @return True if the 'marketsCount' field has been set, false otherwise.
      */
    public boolean hasMarketsCount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'marketsCount' field.
      * @return This builder.
      */
    public EventInfo.Builder clearMarketsCount() {
      marketsCount = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'startDate' field.
      * @return The value.
      */
    public CharSequence getStartDate() {
      return startDate;
    }


    /**
      * Sets the value of the 'startDate' field.
      * @param value The value of 'startDate'.
      * @return This builder.
      */
    public EventInfo.Builder setStartDate(CharSequence value) {
      validate(fields()[6], value);
      this.startDate = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'startDate' field has been set.
      * @return True if the 'startDate' field has been set, false otherwise.
      */
    public boolean hasStartDate() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'startDate' field.
      * @return This builder.
      */
    public EventInfo.Builder clearStartDate() {
      startDate = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'timeRange' field.
      * @return The value.
      */
    public CharSequence getTimeRange() {
      return timeRange;
    }


    /**
      * Sets the value of the 'timeRange' field.
      * @param value The value of 'timeRange'.
      * @return This builder.
      */
    public EventInfo.Builder setTimeRange(CharSequence value) {
      validate(fields()[7], value);
      this.timeRange = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'timeRange' field has been set.
      * @return True if the 'timeRange' field has been set, false otherwise.
      */
    public boolean hasTimeRange() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'timeRange' field.
      * @return This builder.
      */
    public EventInfo.Builder clearTimeRange() {
      timeRange = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'sport' field.
      * @return The value.
      */
    public Sport getSport() {
      return sport;
    }


    /**
      * Sets the value of the 'sport' field.
      * @param value The value of 'sport'.
      * @return This builder.
      */
    public EventInfo.Builder setSport(Sport value) {
      validate(fields()[8], value);
      this.sportBuilder = null;
      this.sport = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'sport' field has been set.
      * @return True if the 'sport' field has been set, false otherwise.
      */
    public boolean hasSport() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'sport' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Sport.Builder getSportBuilder() {
      if (sportBuilder == null) {
        if (hasSport()) {
          setSportBuilder(Sport.newBuilder(sport));
        } else {
          setSportBuilder(Sport.newBuilder());
        }
      }
      return sportBuilder;
    }

    /**
     * Sets the Builder instance for the 'sport' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public EventInfo.Builder setSportBuilder(Sport.Builder value) {
      clearSport();
      sportBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'sport' field has an active Builder instance
     * @return True if the 'sport' field has an active Builder instance
     */
    public boolean hasSportBuilder() {
      return sportBuilder != null;
    }

    /**
      * Clears the value of the 'sport' field.
      * @return This builder.
      */
    public EventInfo.Builder clearSport() {
      sport = null;
      sportBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public Country getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public EventInfo.Builder setCountry(Country value) {
      validate(fields()[9], value);
      this.countryBuilder = null;
      this.country = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'country' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Country.Builder getCountryBuilder() {
      if (countryBuilder == null) {
        if (hasCountry()) {
          setCountryBuilder(Country.newBuilder(country));
        } else {
          setCountryBuilder(Country.newBuilder());
        }
      }
      return countryBuilder;
    }

    /**
     * Sets the Builder instance for the 'country' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public EventInfo.Builder setCountryBuilder(Country.Builder value) {
      clearCountry();
      countryBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'country' field has an active Builder instance
     * @return True if the 'country' field has an active Builder instance
     */
    public boolean hasCountryBuilder() {
      return countryBuilder != null;
    }

    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public EventInfo.Builder clearCountry() {
      country = null;
      countryBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'league' field.
      * @return The value.
      */
    public League getLeague() {
      return league;
    }


    /**
      * Sets the value of the 'league' field.
      * @param value The value of 'league'.
      * @return This builder.
      */
    public EventInfo.Builder setLeague(League value) {
      validate(fields()[10], value);
      this.leagueBuilder = null;
      this.league = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'league' field has been set.
      * @return True if the 'league' field has been set, false otherwise.
      */
    public boolean hasLeague() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'league' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public League.Builder getLeagueBuilder() {
      if (leagueBuilder == null) {
        if (hasLeague()) {
          setLeagueBuilder(League.newBuilder(league));
        } else {
          setLeagueBuilder(League.newBuilder());
        }
      }
      return leagueBuilder;
    }

    /**
     * Sets the Builder instance for the 'league' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public EventInfo.Builder setLeagueBuilder(League.Builder value) {
      clearLeague();
      leagueBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'league' field has an active Builder instance
     * @return True if the 'league' field has an active Builder instance
     */
    public boolean hasLeagueBuilder() {
      return leagueBuilder != null;
    }

    /**
      * Clears the value of the 'league' field.
      * @return This builder.
      */
    public EventInfo.Builder clearLeague() {
      league = null;
      leagueBuilder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'teams' field.
      * @return The value.
      */
    public Teams getTeams() {
      return teams;
    }


    /**
      * Sets the value of the 'teams' field.
      * @param value The value of 'teams'.
      * @return This builder.
      */
    public EventInfo.Builder setTeams(Teams value) {
      validate(fields()[11], value);
      this.teamsBuilder = null;
      this.teams = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'teams' field has been set.
      * @return True if the 'teams' field has been set, false otherwise.
      */
    public boolean hasTeams() {
      return fieldSetFlags()[11];
    }

    /**
     * Gets the Builder instance for the 'teams' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Teams.Builder getTeamsBuilder() {
      if (teamsBuilder == null) {
        if (hasTeams()) {
          setTeamsBuilder(Teams.newBuilder(teams));
        } else {
          setTeamsBuilder(Teams.newBuilder());
        }
      }
      return teamsBuilder;
    }

    /**
     * Sets the Builder instance for the 'teams' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public EventInfo.Builder setTeamsBuilder(Teams.Builder value) {
      clearTeams();
      teamsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'teams' field has an active Builder instance
     * @return True if the 'teams' field has an active Builder instance
     */
    public boolean hasTeamsBuilder() {
      return teamsBuilder != null;
    }

    /**
      * Clears the value of the 'teams' field.
      * @return This builder.
      */
    public EventInfo.Builder clearTeams() {
      teams = null;
      teamsBuilder = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EventInfo build() {
      try {
        EventInfo record = new EventInfo();
        record.id = fieldSetFlags()[0] ? this.id : (CharSequence) defaultValue(fields()[0]);
        record.state = fieldSetFlags()[1] ? this.state : (CharSequence) defaultValue(fields()[1]);
        record.status = fieldSetFlags()[2] ? this.status : (CharSequence) defaultValue(fields()[2]);
        if (liveGamePeriodBuilder != null) {
          try {
            record.liveGamePeriod = this.liveGamePeriodBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("liveGamePeriod"));
            throw e;
          }
        } else {
          record.liveGamePeriod = fieldSetFlags()[3] ? this.liveGamePeriod : (LiveGamePeriod) defaultValue(fields()[3]);
        }
        record.liveMinute = fieldSetFlags()[4] ? this.liveMinute : (Integer) defaultValue(fields()[4]);
        record.marketsCount = fieldSetFlags()[5] ? this.marketsCount : (Integer) defaultValue(fields()[5]);
        record.startDate = fieldSetFlags()[6] ? this.startDate : (CharSequence) defaultValue(fields()[6]);
        record.timeRange = fieldSetFlags()[7] ? this.timeRange : (CharSequence) defaultValue(fields()[7]);
        if (sportBuilder != null) {
          try {
            record.sport = this.sportBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("sport"));
            throw e;
          }
        } else {
          record.sport = fieldSetFlags()[8] ? this.sport : (Sport) defaultValue(fields()[8]);
        }
        if (countryBuilder != null) {
          try {
            record.country = this.countryBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("country"));
            throw e;
          }
        } else {
          record.country = fieldSetFlags()[9] ? this.country : (Country) defaultValue(fields()[9]);
        }
        if (leagueBuilder != null) {
          try {
            record.league = this.leagueBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("league"));
            throw e;
          }
        } else {
          record.league = fieldSetFlags()[10] ? this.league : (League) defaultValue(fields()[10]);
        }
        if (teamsBuilder != null) {
          try {
            record.teams = this.teamsBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("teams"));
            throw e;
          }
        } else {
          record.teams = fieldSetFlags()[11] ? this.teams : (Teams) defaultValue(fields()[11]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EventInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<EventInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EventInfo>
    READER$ = (org.apache.avro.io.DatumReader<EventInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.id);
    }

    if (this.state == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.state);
    }

    if (this.status == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.status);
    }

    if (this.liveGamePeriod == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.liveGamePeriod.customEncode(out);
    }

    if (this.liveMinute == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.liveMinute);
    }

    if (this.marketsCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.marketsCount);
    }

    if (this.startDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.startDate);
    }

    if (this.timeRange == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.timeRange);
    }

    if (this.sport == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.sport.customEncode(out);
    }

    if (this.country == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.country.customEncode(out);
    }

    if (this.league == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.league.customEncode(out);
    }

    if (this.teams == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.teams.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.state = null;
      } else {
        this.state = in.readString(this.state instanceof Utf8 ? (Utf8)this.state : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.status = null;
      } else {
        this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.liveGamePeriod = null;
      } else {
        if (this.liveGamePeriod == null) {
          this.liveGamePeriod = new LiveGamePeriod();
        }
        this.liveGamePeriod.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.liveMinute = null;
      } else {
        this.liveMinute = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.marketsCount = null;
      } else {
        this.marketsCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.startDate = null;
      } else {
        this.startDate = in.readString(this.startDate instanceof Utf8 ? (Utf8)this.startDate : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.timeRange = null;
      } else {
        this.timeRange = in.readString(this.timeRange instanceof Utf8 ? (Utf8)this.timeRange : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sport = null;
      } else {
        if (this.sport == null) {
          this.sport = new Sport();
        }
        this.sport.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.country = null;
      } else {
        if (this.country == null) {
          this.country = new Country();
        }
        this.country.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.league = null;
      } else {
        if (this.league == null) {
          this.league = new League();
        }
        this.league.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.teams = null;
      } else {
        if (this.teams == null) {
          this.teams = new Teams();
        }
        this.teams.customDecode(in);
      }

    } else {
      for (int i = 0; i < 12; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.state = null;
          } else {
            this.state = in.readString(this.state instanceof Utf8 ? (Utf8)this.state : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.status = null;
          } else {
            this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.liveGamePeriod = null;
          } else {
            if (this.liveGamePeriod == null) {
              this.liveGamePeriod = new LiveGamePeriod();
            }
            this.liveGamePeriod.customDecode(in);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.liveMinute = null;
          } else {
            this.liveMinute = in.readInt();
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.marketsCount = null;
          } else {
            this.marketsCount = in.readInt();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.startDate = null;
          } else {
            this.startDate = in.readString(this.startDate instanceof Utf8 ? (Utf8)this.startDate : null);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.timeRange = null;
          } else {
            this.timeRange = in.readString(this.timeRange instanceof Utf8 ? (Utf8)this.timeRange : null);
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sport = null;
          } else {
            if (this.sport == null) {
              this.sport = new Sport();
            }
            this.sport.customDecode(in);
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.country = null;
          } else {
            if (this.country == null) {
              this.country = new Country();
            }
            this.country.customDecode(in);
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.league = null;
          } else {
            if (this.league == null) {
              this.league = new League();
            }
            this.league.customDecode(in);
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.teams = null;
          } else {
            if (this.teams == null) {
              this.teams = new Teams();
            }
            this.teams.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










